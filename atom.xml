<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoffeeHouse</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-08T07:10:05.817Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>qiuzhaopeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>飞流工作总结</title>
    <link href="http://yoursite.com/2018/10/08/%E9%A3%9E%E6%B5%81%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/08/飞流工作总结/</id>
    <published>2018-10-08T07:08:25.000Z</published>
    <updated>2018-10-08T07:10:05.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、主要工作内容"><a href="#一、主要工作内容" class="headerlink" title="一、主要工作内容"></a>一、主要工作内容</h3><h4 id="1-游戏官网与预约页开发"><a href="#1-游戏官网与预约页开发" class="headerlink" title="1.游戏官网与预约页开发"></a>1.游戏官网与预约页开发</h4><p> 静态页面 ——v1版网站<br>啪啪三国（网站页面修改和后期维护）<br>成都飞流官网（旧版）（网站页面修改和后期维护）<br>三国群英传（网站页面修改和后期维护）<br>  PHP(CI框架)+原生页面 ——v2版网站<br>九州官网（后期维护）<br>天下第一剑客传官网（后台开发及部署上线、部分页面开发、<a href="http://txdyjkz.feiliu.com）" target="_blank" rel="noopener">http://txdyjkz.feiliu.com）</a><br>墨三国官网（后台开发及部署上线、<a href="http://mosanguo.feiliu.com）" target="_blank" rel="noopener">http://mosanguo.feiliu.com）</a><br>啪啪三国2官网（后台开发及部署上线、<a href="http://papa2.feiliu.com/）" target="_blank" rel="noopener">http://papa2.feiliu.com/）</a><br>全职高手预约页（后台开发及部署）<br>傲世群英传-破千军预约页（后台开发及部署上线，不同渠道进入页面二维码功能、<a href="http://asyuyue.feiliu.com）" target="_blank" rel="noopener">http://asyuyue.feiliu.com）</a><br>雄霸乱世预约页（后台开发及部署上线、<a href="http://xb.feiliu.com/register）" target="_blank" rel="noopener">http://xb.feiliu.com/register）</a><br> Node.js + vue.js ——v3版网站<br>傲世群英传-破千军官网（协助伟杰开发后台并初步接触sequelize 和 jest、<a href="http://asqyz.feiliu.com" target="_blank" rel="noopener">http://asqyz.feiliu.com</a> ）<br>繁体官网（无后台页面维护，现已转到game_v3公共后台）<br>忍者龟官网（参与后台开发，项目已下线）<br>成都官网（前期静态页面维护，现已转到game_v3公共后台、<a href="http://www.feiliuchengdu.com）" target="_blank" rel="noopener">http://www.feiliuchengdu.com）</a><br>game_v3共同后台开发（account相关接口的开发，登录注册重置密码。。。）<br>game_v3前端模板开发（template，第一版官网共同模板，第一版预约页共同模板）</p><h4 id="2-land（落地页工作）"><a href="#2-land（落地页工作）" class="headerlink" title="2.land（落地页工作）"></a>2.land（落地页工作）</h4><p> 落地页前端页面<br>三国群英传落地页（多个）<br>傲世群英传落地页（多个）<br> land第三方推广地址适配（nginx配置及land后台配置）<br>三国群英传<br>泰坦大陆<br>傲世群英传<br> land后期维护<br>熟悉admin_land和land_feiliu项目（node+vue+mysql项目）<br>后期维护工作，添加统计落地页访问记录和下载点击记录功能</p><h4 id="3-gas"><a href="#3-gas" class="headerlink" title="3.gas"></a>3.gas</h4><p>后台管理系统使用（广点通和积分墙两种信息对接）<br>测试 联调 排bug 查询日志<br>微信广告通过广点通的方式接入GAS</p><h4 id="4-微信积分商城"><a href="#4-微信积分商城" class="headerlink" title="4.微信积分商城"></a>4.微信积分商城</h4><p>天下第一剑客传积分商城（测试环境搭建，API接口路径修改，bug修改，礼包限制等功能添加，活动礼包投放）<br>啪啪三国2积分商城（测试环境搭建，API接口路径修改，bug修改，礼包限制等功能添加，活动礼包投放）<br>忍者龟积分商城和bug反馈系统（后台开发，项目已下线）</p><h4 id="5-数据统计"><a href="#5-数据统计" class="headerlink" title="5.数据统计"></a>5.数据统计</h4><p>九州（日常数据统计，不定时礼包投放，excle 合并入库脚本，积分入库）<br>天下第一剑客传积分商城（日常数据统计，签到礼包实物礼包活动投放，礼包码入库）<br>啪啪三国2积分商城（日常数据统计，签到礼包实物礼包活动投放，礼包码入库）<br>墨三国预约（数据统计）<br>傲世群英传-破千军（日常预约人数统计，渠道来源统计）</p><p>达到的水平：<br>能够完成线上网站（v1版、v2版、v3版）的维护，对网站管理后台系统能够熟练使用<br>能够独立完成包括公司官网、游戏官网、游戏预约网站的后端开发以及前端页面的开发<br>能够完成游戏积分商城的维护以及活动礼包投放的工作<br>能够高效完成land落地页的制作以及第三方推广地址适配工作<br>能够完成gas对接、联调、测试等工作</p><h3 id="二、工作中的收获"><a href="#二、工作中的收获" class="headerlink" title="二、工作中的收获"></a>二、工作中的收获</h3><pre><code>技术层次上，第一次接触CI框架和smarty模板，对php和nginx有了一定的了解，与服务器和数据库打交道，掌握了更多便捷的Linux命令以及sql语句，在网站v3版开发过程中，深入学习了node的express框架、sequelize 和 jest，自己的vue水平也有了一定的提高；工作方法上，项目开发流程进一步优化，按照项目工期制定计划，明确的各个时间点，按时完成集成验收和功能验收，提高工作效率，还有通过代码review的方式，接收采纳团队提出建议，进一步完善优化代码，项目API文档化，条理清晰地记录项目所需的各种信息。</code></pre><h3 id="三、工作中的问题"><a href="#三、工作中的问题" class="headerlink" title="三、工作中的问题"></a>三、工作中的问题</h3><p> 前期的功能设计需要加强</p><p>不足：喜欢做完一步再想下一步，缺乏整体设计，没有前期设计把关，方案不是最优的情况下花费的代价和优化的代价都大。</p><p>改进：“以终为始”考虑问题，要明确自己的目标，再去设计接下去的路，否则规划只是空话，再有新的工作又会觉得计划没有变化快了。</p><p> 单元测试需要加强</p><p>不足：单元测试意识淡薄，业务功能没有对应的单元测试容易出现问题，“傲世群英传-破千军”的预约页和“雄霸乱世”预约页进行后期维护，一次替换成测试环境的接口，一次把官网后台的功能去掉，都是没有进行完整测试造成的，测试工作对整个项目的重要性是不可代替的。</p><p>改进：接下去的工作，应及时完善接口API文档和对应的单元测试，项目维护变更功能必须及时更新相应的单元测试，然后进行完善的全面的测试确保功能没有问题之后，才可以部署到正式环境，对其他部门提供服务。</p><h3 id="四、后续计划"><a href="#四、后续计划" class="headerlink" title="四、后续计划"></a>四、后续计划</h3><p>现有项目的文档补充和代码优化（API文档、ALM文档、单元测试）<br>网站v3版二期 （公共后台优化、前端模板的开发）// 这套网站系统是我们工作的核心<br>后台管理系统的学习（open系统、sso系统、cs系统）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、主要工作内容&quot;&gt;&lt;a href=&quot;#一、主要工作内容&quot; class=&quot;headerlink&quot; title=&quot;一、主要工作内容&quot;&gt;&lt;/a&gt;一、主要工作内容&lt;/h3&gt;&lt;h4 id=&quot;1-游戏官网与预约页开发&quot;&gt;&lt;a href=&quot;#1-游戏官网与预约页开发&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git多账号配置</title>
    <link href="http://yoursite.com/2018/09/26/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/26/git多账号配置/</id>
    <published>2018-09-26T03:02:11.000Z</published>
    <updated>2018-09-26T03:39:59.144Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>ssh 方式链接到 Github／Gerrit，需要唯一的公钥，如果想同一台电脑绑定两个Github/Gerrit<br>帐号，需要两个条件:<br>  1.能够生成两对 私钥/公钥<br>  2.push 时，可以区分两个账户，推送到相应的仓库</li></ul><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><ol><li><p>Mac 下输入命令 ls ~/.ssh/，看到 id_rsa 与 id_rsa_pub 则说明已经有一对密钥<br><img src="/2018/09/26/git多账号配置/1.jpg" alt=""></p></li><li><p>生成新的公钥，并命名为 id_rsa_2 (保证与之前密钥文件名称不同即可,文件名最好有意义，否则写后面的配置的时候写错文件名，我的文件名是id_rsa_coffeehouse）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_2 -C "yourmail@xxx.com"</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2018/09/26/git多账号配置/2.png" alt=""></p><ol start="3"><li>在 .ssh 文件夹下新建 config 文件并编辑，令不同 Host 实际映射到同一HostName，但密钥文件不同。Host 前缀可自定义。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#osOne</span><br><span class="line">Host feiliu  <span class="comment">// 别名</span></span><br><span class="line">HostName <span class="number">172.16</span>.***.*** <span class="comment">// 主机名可用ip也可以是域名</span></span><br><span class="line">Port <span class="number">29418</span> <span class="comment">// 服务器open-ssh端口</span></span><br><span class="line">User qiuzhaopeng <span class="comment">// 登录用户名</span></span><br><span class="line">IdentityFile ~<span class="regexp">/.ssh/i</span>d_rsa <span class="comment">// 证书文件路径</span></span><br><span class="line"></span><br><span class="line">#osTwo</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User CoffeeHouse1122</span><br><span class="line">IdentityFile ~<span class="regexp">/.ssh/i</span>d_rsa_coffeehouse</span><br></pre></td></tr></table></figure><ol start="4"><li><p>将id_rsa_coffeehouse.pub的密钥copy到github账号配置SSH keys中<br><img src="/2018/09/26/git多账号配置/3.png" alt=""></p></li><li><p>测试 (可跳过)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T feiliu</span><br><span class="line">ssh -T github.com</span><br></pre></td></tr></table></figure></li><li><p>将项目 clone 到本地, git push 测试一下</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ssh 方式链接到 Github／Gerrit，需要唯一的公钥，如果想同一台电脑绑定两个Github/Gerrit&lt;br&gt;帐号，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js高级</title>
    <link href="http://yoursite.com/2018/08/15/js%E9%AB%98%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/08/15/js高级/</id>
    <published>2018-08-15T02:56:25.000Z</published>
    <updated>2018-10-08T07:12:53.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-高级"><a href="#JavaScript-高级" class="headerlink" title="JavaScript 高级"></a>JavaScript 高级</h1><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li><a href="https://lipengzhou.github.io/new-snake/" target="_blank" rel="noopener">贪吃蛇</a></li></ul><hr><h4 id="JavaScript-是什么"><a href="#JavaScript-是什么" class="headerlink" title="JavaScript 是什么"></a>JavaScript 是什么</h4><ul><li>解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言</li><li>语言特点：动态，头等函数 (First-class Function)<ul><li>又称函数是 JavaScript 中的一等公民</li></ul></li><li>执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境<ul><li>但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js</li></ul></li><li>编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格</li></ul><h4 id="JavaScript-与浏览器的关系"><a href="#JavaScript-与浏览器的关系" class="headerlink" title="JavaScript 与浏览器的关系"></a>JavaScript 与浏览器的关系</h4><p><img src="/2018/08/15/js高级/media/browser-js.png" alt=""></p><h4 id="JavaScript-的组成"><a href="#JavaScript-的组成" class="headerlink" title="JavaScript 的组成"></a>JavaScript 的组成</h4><table><thead><tr><th>组成部分</th><th>说明</th></tr></thead><tbody><tr><td>Ecmascript</td><td>描述了该语言的语法和基本对象</td></tr><tr><td>DOM</td><td>描述了处理网页内容的方法和接口</td></tr><tr><td>BOM</td><td>描述了与浏览器进行交互的方法和接口</td></tr></tbody></table><h4 id="JavaScript-可以做什么"><a href="#JavaScript-可以做什么" class="headerlink" title="JavaScript 可以做什么"></a>JavaScript 可以做什么</h4><blockquote><p>Any application that can be written in JavaScript, will eventually be written in JavaScript.<br>凡是能用 JavaScript 写出来的，最终都会用 JavaScript 写出来</p></blockquote><ul><li><a href="https://www.zhihu.com/question/20796866" target="_blank" rel="noopener">知乎 - JavaScript 能做什么，该做什么？</a></li><li><a href="https://github.com/phodal/articles/issues/1" target="_blank" rel="noopener">最流行的编程语言 JavaScript 能做什么？</a></li></ul><h4 id="JavaScript-发展历史"><a href="#JavaScript-发展历史" class="headerlink" title="JavaScript 发展历史"></a>JavaScript 发展历史</h4><blockquote><p><a href="http://javascript.ruanyifeng.com/introduction/history.html" target="_blank" rel="noopener">JavaScript 标准参考教程 - JavaScript 语言的历史</a></p></blockquote><ul><li>JavaScript 的诞生</li><li>JavaScript 与 Ecmascript 的关系</li><li>JavaScript 与 Java 的关系</li><li>JavaScript 的版本</li><li>JavaScript 周边大事记</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>语法<ul><li>区分大小写</li><li>标识符</li><li>注释</li><li>严格模式</li><li>语句</li></ul></li><li>关键字和保留字</li><li>变量</li><li>数据类型<ul><li>typeof 操作符</li><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Object</li></ul></li><li>操作符</li><li>流程控制语句</li><li>函数</li></ul><h3 id="JavaScript-中的数据类型"><a href="#JavaScript-中的数据类型" class="headerlink" title="JavaScript 中的数据类型"></a>JavaScript 中的数据类型</h3><p>JavaScript 有 5 种简单数据类型：<code>Undefined、Null、Boolean、Number、String</code> 和 1 种复杂数据类型 <code>Object</code> 。</p><h4 id="基本类型（值类型）"><a href="#基本类型（值类型）" class="headerlink" title="基本类型（值类型）"></a>基本类型（值类型）</h4><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><h4 id="复杂类型（引用类型）"><a href="#复杂类型（引用类型）" class="headerlink" title="复杂类型（引用类型）"></a>复杂类型（引用类型）</h4><ul><li>Object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Function</li><li>基本包装类型<ul><li>Boolean</li><li>Number</li><li>String</li></ul></li><li>单体内置对象<ul><li>Global</li><li>Math</li></ul></li></ul><h4 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h4><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toString.call()</code></li></ul><h4 id="值类型和引用类型在内存中的存储方式（画图说明）"><a href="#值类型和引用类型在内存中的存储方式（画图说明）" class="headerlink" title="值类型和引用类型在内存中的存储方式（画图说明）"></a>值类型和引用类型在内存中的存储方式（画图说明）</h4><ul><li>值类型按值存储</li><li>引用类型按引用存储</li></ul><h4 id="值类型复制和引用类型复制（画图说明）"><a href="#值类型复制和引用类型复制（画图说明）" class="headerlink" title="值类型复制和引用类型复制（画图说明）"></a>值类型复制和引用类型复制（画图说明）</h4><ul><li>值类型按值复制</li><li>引用类型按引用复制</li></ul><h4 id="值类型和引用类型参数传递（画图说明）"><a href="#值类型和引用类型参数传递（画图说明）" class="headerlink" title="值类型和引用类型参数传递（画图说明）"></a>值类型和引用类型参数传递（画图说明）</h4><ul><li>值类型按值传递</li><li>引用类型按引用传递</li></ul><h4 id="值类型与引用类型的差别"><a href="#值类型与引用类型的差别" class="headerlink" title="值类型与引用类型的差别"></a>值类型与引用类型的差别</h4><ul><li>基本类型在内存中占据固定大小的空间，因此被保存在栈内存中</li><li>从一个变量向另一个变量复制基本类型的值，复制的是值的副本</li><li>引用类型的值是对象，保存在堆内存</li><li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li><li>从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象</li></ul><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>类型检测方式</li><li>值类型和引用类型的存储方式</li><li>值类型复制和引用类型复制</li><li>方法参数中 值类型数据传递 和 引用类型数据传递</li></ul><h3 id="JavaScript-执行过程"><a href="#JavaScript-执行过程" class="headerlink" title="JavaScript 执行过程"></a>JavaScript 执行过程</h3><p>JavaScript 运行分为两个阶段：</p><ul><li>预解析<ul><li>全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）</li><li>函数内部预解析（所有的变量、函数和形参都会参与预解析）<ul><li>函数</li><li>形参</li><li>普通变量</li></ul></li></ul></li><li>执行</li></ul><p>先预解析全局作用域，然后执行全局作用域中的代码，<br>在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。</p><hr><h2 id="JavaScript-面向对象编程"><a href="#JavaScript-面向对象编程" class="headerlink" title="JavaScript 面向对象编程"></a>JavaScript 面向对象编程</h2><p><img src="/2018/08/15/js高级/./media/mxdxkf.png" width="400" alt=""></p><h3 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h4><blockquote><p>Everything is object （万物皆对象）</p></blockquote><p><img src="/2018/08/15/js高级/./media/20160823024542444.jpg" alt=""></p><p>对象到底是什么，我们可以从两次层次来理解。</p><p><strong>(1) 对象是单个事物的抽象。</strong></p><p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p><p><strong>(2) 对象是一个容器，封装了属性（property）和方法（method）。</strong></p><p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p><p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</p><p>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都<br>映射到一个值。</p><p class="tip"><br>  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。<br></p><h4 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h4><blockquote><p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p></blockquote><p><img src="/2018/08/15/js高级/./media/664ba37eeee9f4623c06c066867f1d38_r.jpg" width="400" alt=""></p><p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。<br>它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。<br>因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p><p>面向对象与面向过程：</p><ul><li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li><li>面向对象就是找一个对象，指挥得结果</li><li>面向对象将执行者转变成指挥者</li><li>面向对象不是面向过程的替代，而是面向过程的封装</li></ul><p>面向对象的特性：</p><ul><li>封装性</li><li>继承性</li><li>[多态性]</li></ul><p>扩展阅读：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">维基百科 - 面向对象程序设计</a></li><li><a href="https://www.zhihu.com/question/19854505" target="_blank" rel="noopener">知乎：如何用一句话说明什么是面向对象思想？</a></li><li><a href="https://www.zhihu.com/question/31021366" target="_blank" rel="noopener">知乎：什么是面向对象编程思想？</a></li></ul><h4 id="程序中面向对象的基本体现"><a href="#程序中面向对象的基本体现" class="headerlink" title="程序中面向对象的基本体现"></a>程序中面向对象的基本体现</h4><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。<br>自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = &#123; <span class="attr">name</span>: <span class="string">'Michael'</span>, <span class="attr">score</span>: <span class="number">98</span> &#125;</span><br><span class="line"><span class="keyword">var</span> std2 = &#123; <span class="attr">name</span>: <span class="string">'Bob'</span>, <span class="attr">score</span>: <span class="number">81</span> &#125;</span><br></pre></td></tr></table></figure><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printScore</span> (<span class="params">student</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + student.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + student.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，<br>而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。<br>如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p><p>抽象数据行为模板（Class）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.printScore = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + <span class="keyword">this</span>.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + <span class="keyword">this</span>.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据模板创建具体实例对象（Instance）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = <span class="keyword">new</span> Student(<span class="string">'Michael'</span>, <span class="number">98</span>)</span><br><span class="line"><span class="keyword">var</span> std2 = <span class="keyword">new</span> Student(<span class="string">'Bob'</span>, <span class="number">81</span>)</span><br></pre></td></tr></table></figure><p>实例对象具有自己的具体行为（给对象发消息）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std1.printScore() <span class="comment">// =&gt; 姓名：Michael  成绩：98</span></span><br><span class="line">std2.printScore() <span class="comment">// =&gt; 姓名：Bob  成绩 81</span></span><br></pre></td></tr></table></figure><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。<br>Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，<br>而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p><p>所以，面向对象的设计思想是：</p><ul><li>抽象出 Class</li><li>根据 Class 创建 Instance</li><li>指挥 Instance 得结果</li></ul><p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h4><p>我们可以直接通过 <code>new Object()</code> 创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">'Jack'</span></span><br><span class="line">person.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的写法固然没有问题，但是假如我们要生成两个 <code>person</code> 实例对象呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name: <span class="string">'Mike'</span>,</span><br><span class="line">  age: <span class="number">16</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p><h4 id="简单方式的改进：工厂函数"><a href="#简单方式的改进：工厂函数" class="headerlink" title="简单方式的改进：工厂函数"></a>简单方式的改进：工厂函数</h4><p>我们可以写一个函数，解决代码重复问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    age: age,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成实例对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>内容引导：</p><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系<ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>普通函数调用和构造函数调用的区别</li><li>构造函数的返回值</li><li>构造函数的静态成员和实例成员<ul><li>函数也是对象</li><li>实例成员</li><li>静态成员</li></ul></li><li>构造函数的问题</li></ul><h4 id="更优雅的工厂函数：构造函数"><a href="#更优雅的工厂函数：构造函数" class="headerlink" title="更优雅的工厂函数：构造函数"></a>更优雅的工厂函数：构造函数</h4><p>一种更优雅的工厂函数就是下面这样，构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>)</span><br><span class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></span><br></pre></td></tr></table></figure><h4 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h4><p>在上面的示例中，<code>Person()</code> 函数取代了 <code>createPerson()</code> 函数，但是实现效果是一样的。<br>这是为什么呢？</p><p>我们注意到，<code>Person()</code> 中的代码与 <code>createPerson()</code> 有以下几点不同之处：</p><ul><li>没有显示的创建对象</li><li>直接将属性和方法赋给了 <code>this</code> 对象</li><li>没有 <code>return</code> 语句</li><li>函数名使用的是大写的 <code>Person</code></li></ul><p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。<br>以这种方式调用构造函数会经历以下 4 个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>下面是具体的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class="line">  <span class="comment">// var instance = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></span><br><span class="line">  <span class="comment">// this = instance</span></span><br><span class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数和实例对象的关系"><a href="#构造函数和实例对象的关系" class="headerlink" title="构造函数和实例对象的关系"></a>构造函数和实例对象的关系</h4><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。<br>在每一个实例对象中的__proto__中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor === p2.constructor) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的，<br>但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>构造函数是根据具体的事物抽象出来的抽象模板</li><li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li><li>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数<ul><li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li></ul></li><li>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<ul><li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符，后面学原型会解释为什么</li></ul></li></ul><h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。<br>那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容，<br>每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>对于这种问题我们可以把需要共享的函数定义到构造函数外部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> = <span class="title">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = sayHello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。</p><p>你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fns = &#123;</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = fns.sayHello</span><br><span class="line">  <span class="keyword">this</span>.sayAge = fns.sayAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayAge === p2.sayAge) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。<br>但是代码看起来还是那么的格格不入，那有没有更好的方式呢？</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系<ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>构造函数的问题</li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>内容引导：</p><ul><li>使用 prototype 原型对象解决构造函数的问题</li><li>分析 构造函数、prototype 原型对象、实例对象 三者之间的关系</li><li>属性成员搜索原则：原型链</li><li>实例对象读写原型对象中的成员</li><li>原型对象的简写形式</li><li>原生对象的原型<ul><li>Object</li><li>Array</li><li>String</li><li>…</li></ul></li><li>原型对象的问题</li><li>构造的函数和原型对象使用建议</li></ul><h4 id="更好的解决方案：-prototype"><a href="#更好的解决方案：-prototype" class="headerlink" title="更好的解决方案： prototype"></a>更好的解决方案： <code>prototype</code></h4><p>Javascript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。<br>这个对象的所有属性和方法，都会被构造函数的实例继承。</p><p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype)</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'human'</span></span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法，<br>其实都是同一个内存地址，指向 <code>prototype</code> 对象，因此就提高了运行效率。</p><h4 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h4><p><img src="/2018/08/15/js高级/./media/构造函数-实例-原型之间的关系.png" alt=""></p><p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line"></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p class="tip"><br>  <code>__proto__</code> 是非标准属性。<br></p><p>实例对象可以直接访问原型对象成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li><li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li><li>所有实例都直接或间接继承了原型对象的成员</li></ul><h4 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h4><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><h4 id="实例对象读写原型对象成员"><a href="#实例对象读写原型对象成员" class="headerlink" title="实例对象读写原型对象成员"></a>实例对象读写原型对象成员</h4><p>读取：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><p>值类型成员写入（<code>实例对象.值类型成员 = xx</code>）：</p><ul><li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li><li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li></ul><p>引用类型成员写入（<code>实例对象.引用类型成员 = xx</code>）：</p><ul><li>同上</li></ul><p>复杂类型修改（<code>实例对象.成员.xx = xx</code>）：</p><ul><li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li><li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（<code>实例对象.undefined.xx = xx</code>）</li></ul><h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  type: <span class="string">'human'</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。<br>这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p><p>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</span><br><span class="line">  type: 'human',</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h4><p class="tip"><br>  所有函数都有 prototype 属性对象。<br></p><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li><li>Date.prototype</li><li>…</li></ul><p>练习：为数组对象和字符串对象扩展原型方法。</p><h4 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h4><ul><li>共享数组</li><li>共享对象</li></ul><p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。</p><p>一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。</p><h4 id="原型对象使用建议"><a href="#原型对象使用建议" class="headerlink" title="原型对象使用建议"></a>原型对象使用建议</h4><ul><li>私有成员（一般就是非函数成员）放到构造函数中</li><li>共享成员（一般就是函数）放到原型对象中</li><li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li></ul><h3 id="案例：随机方块"><a href="#案例：随机方块" class="headerlink" title="案例：随机方块"></a>案例：随机方块</h3><hr><h2 id="面向对象游戏案例：贪吃蛇"><a href="#面向对象游戏案例：贪吃蛇" class="headerlink" title="面向对象游戏案例：贪吃蛇"></a>面向对象游戏案例：贪吃蛇</h2><p>案例相关源码以上传到 GitHub ：<a href="https://github.com/lipengzhou/new-snake" target="_blank" rel="noopener">https://github.com/lipengzhou/new-snake</a></p><h3 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h3><h4 id="游戏演示"><a href="#游戏演示" class="headerlink" title="游戏演示"></a>游戏演示</h4><p>在线演示地址：<a href="https://lipengzhou.github.io/new-snake/" target="_blank" rel="noopener">贪吃蛇</a></p><h4 id="案例目标"><a href="#案例目标" class="headerlink" title="案例目标"></a>案例目标</h4><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h4><p>放一个容器盛放游戏场景 div#map，设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#map</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析对象"><a href="#分析对象" class="headerlink" title="分析对象"></a>分析对象</h4><ul><li>游戏对象</li><li>蛇对象</li><li>食物对象</li></ul><h4 id="创建食物对象"><a href="#创建食物对象" class="headerlink" title="创建食物对象"></a>创建食物对象</h4><ul><li><p>Food</p><ul><li><p>属性</p><ul><li>x       </li><li>y</li><li>width</li><li>height</li><li>color       </li></ul></li><li><p>方法</p><ul><li>render       随机创建一个食物对象，并输出到map上</li></ul></li></ul></li><li><p>创建Food的构造函数，并设置属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, width, height, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = y || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 食物的宽度和高度(像素)</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 食物的颜色</span></span><br><span class="line">  <span class="keyword">this</span>.color = color || <span class="string">'green'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Food.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetWidth / <span class="keyword">this</span>.width) * <span class="keyword">this</span>.width;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetHeight / <span class="keyword">this</span>.height) * <span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态创建食物对应的div</span></span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  map.appendChild(div);</span><br><span class="line">  div.style.position = position;</span><br><span class="line">  div.style.left = <span class="keyword">this</span>.x + <span class="string">'px'</span>;</span><br><span class="line">  div.style.top = <span class="keyword">this</span>.y + <span class="string">'px'</span>;</span><br><span class="line">  div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">  div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  div.style.backgroundColor = <span class="keyword">this</span>.color;</span><br><span class="line">  elements.push(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过自调用函数，进行封装，通过window暴露Food对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Food = Food;</span><br></pre></td></tr></table></figure><h4 id="创建蛇对象"><a href="#创建蛇对象" class="headerlink" title="创建蛇对象"></a>创建蛇对象</h4><ul><li><p>Snake</p></li><li><p>属性</p><ul><li>width    蛇节的宽度 默认20</li><li>height   蛇节的高度 默认20</li><li>body     数组，蛇的头部和身体，第一个位置是蛇头</li><li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li></ul></li><li><p>方法</p><ul><li>render  把蛇渲染到map上</li></ul></li><li><p>Snake构造函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置每一个蛇节的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 蛇的每一部分, 第一部分是蛇头</span></span><br><span class="line">  <span class="keyword">this</span>.body = [</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">this</span>.direction = direction || <span class="string">'right'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>render方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Snake.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>.body[i];</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    map.appendChild(div);</span><br><span class="line">    div.style.left = obj.x * <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.top = obj.y * <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">    div.style.position = position;</span><br><span class="line">    div.style.backgroundColor = obj.color;</span><br><span class="line">    div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在自调用函数中暴露Snake对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Snake = Snake;</span><br></pre></td></tr></table></figure><h4 id="创建游戏对象"><a href="#创建游戏对象" class="headerlink" title="创建游戏对象"></a>创建游戏对象</h4><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p><ul><li><p>Game</p><ul><li><p>属性</p><ul><li><p>food</p></li><li><p>snake</p></li><li><p>map</p></li></ul></li><li><p>方法</p><ul><li>start            开始游戏（绘制所有游戏对象）</li></ul></li></ul></li></ul><ul><li>构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food = <span class="keyword">new</span> Food();</span><br><span class="line">  <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake();</span><br><span class="line">  <span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开始游戏，渲染食物对象和蛇对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food.render(<span class="keyword">this</span>.map);</span><br><span class="line">  <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h3><h4 id="写蛇的move方法"><a href="#写蛇的move方法" class="headerlink" title="写蛇的move方法"></a>写蛇的move方法</h4><ul><li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li></ul><ol><li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li><li>蛇头部分根据不同的方向决定 往哪里移动</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 让蛇身体的每一部分往前移动一下</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</span><br><span class="line">    <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据移动的方向，决定蛇头如何处理</span></span><br><span class="line">  <span class="keyword">switch</span>(<span class="keyword">this</span>.direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'left'</span>: </span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'right'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在game中测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line"><span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br></pre></td></tr></table></figure><h4 id="让蛇自己动起来"><a href="#让蛇自己动起来" class="headerlink" title="让蛇自己动起来"></a>让蛇自己动起来</h4><ul><li><p>私有方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是私有方法？</span><br><span class="line">  不能被外部访问的方法</span><br><span class="line">如何创建私有方法？</span><br><span class="line">  使用自调用函数包裹</span><br></pre></td></tr></table></figure></li><li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p></li><li>判断蛇是否撞墙</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runSnake</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line">    <span class="comment">// 在渲染前，删除之前的蛇</span></span><br><span class="line">    <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断蛇是否撞墙</span></span><br><span class="line">    <span class="keyword">var</span> maxX = <span class="keyword">this</span>.map.offsetWidth / <span class="keyword">this</span>.snake.width;</span><br><span class="line">    <span class="keyword">var</span> maxY = <span class="keyword">this</span>.map.offsetHeight / <span class="keyword">this</span>.snake.height;</span><br><span class="line">    <span class="keyword">var</span> headX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</span><br><span class="line">    <span class="keyword">var</span> headY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">if</span> (headX &lt; <span class="number">0</span> || headX &gt;= maxX) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (headY &lt; <span class="number">0</span> || headY &gt;= maxY) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;.bind(that), <span class="number">150</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在snake中添加删除蛇的私有方法，在render中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除渲染的蛇</span></span><br><span class="line">  <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 删除页面上渲染的蛇</span></span><br><span class="line">    elements[i].parentNode.removeChild(elements[i]);</span><br><span class="line">    <span class="comment">// 删除elements数组中的元素</span></span><br><span class="line">    elements.splice(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在game中通过键盘控制蛇的移动方向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindKey</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.keyCode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">        <span class="comment">// left</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'left'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">        <span class="comment">// top</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'top'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">        <span class="comment">// right</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'right'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">        <span class="comment">// bottom</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'bottom'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;.bind(that), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在start方法中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindKey();</span><br></pre></td></tr></table></figure><h4 id="判断蛇是否吃到食物"><a href="#判断蛇是否吃到食物" class="headerlink" title="判断蛇是否吃到食物"></a>判断蛇是否吃到食物</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Snake的move方法中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在移动的过程中判断蛇是否吃到食物</span></span><br><span class="line"><span class="comment">// 如果蛇头和食物的位置重合代表吃到食物</span></span><br><span class="line"><span class="comment">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></span><br><span class="line"><span class="keyword">var</span> headX = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</span><br><span class="line"><span class="keyword">var</span> headY = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</span><br><span class="line"><span class="keyword">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</span><br><span class="line">  <span class="comment">// 吃到食物，往蛇节的最后加一节</span></span><br><span class="line">  <span class="keyword">var</span> last = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">this</span>.body.push(&#123;</span><br><span class="line">    x: last.x,</span><br><span class="line">    y: last.y,</span><br><span class="line">    color: last.color</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></span><br><span class="line">  food.render(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它处理"><a href="#其它处理" class="headerlink" title="其它处理"></a>其它处理</h3><h4 id="把html中的js代码放到index-js中"><a href="#把html中的js代码放到index-js中" class="headerlink" title="把html中的js代码放到index.js中"></a>把html中的js代码放到index.js中</h4><p>避免html中出现js代码</p><h4 id="自调用函数的参数"><a href="#自调用函数的参数" class="headerlink" title="自调用函数的参数"></a>自调用函数的参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>))</span><br></pre></td></tr></table></figure><ul><li>传入window对象</li></ul><p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p><ul><li>传入undefined</li></ul><p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p><h4 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p><p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p><ul><li>问题1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></span><br><span class="line"><span class="comment">// 下面代码会报错</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">// 所以代码规范中会建议在自调用函数之前加上分号</span></span><br><span class="line"><span class="comment">// 下面代码没有问题</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><ul><li>问题2 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></span><br><span class="line"><span class="comment">// 所以建议自调用函数前，加上;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'11'</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'22'</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><ul><li>现实生活中的继承</li><li>程序中的继承</li></ul><h3 id="构造函数的属性继承：借用构造函数"><a href="#构造函数的属性继承：借用构造函数" class="headerlink" title="构造函数的属性继承：借用构造函数"></a>构造函数的属性继承：借用构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数继承属性成员</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1.type, s1.name, s1.age) <span class="comment">// =&gt; human 张三 18</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的原型方法继承：拷贝继承（for-in）"><a href="#构造函数的原型方法继承：拷贝继承（for-in）" class="headerlink" title="构造函数的原型方法继承：拷贝继承（for-in）"></a>构造函数的原型方法继承：拷贝继承（for-in）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象拷贝继承原型对象成员</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</span><br><span class="line">  Student.prototype[key] = Person.prototype[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><h3 id="另一种继承方式：原型继承"><a href="#另一种继承方式：原型继承" class="headerlink" title="另一种继承方式：原型继承"></a>另一种继承方式：原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用原型的特性实现继承</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.type) <span class="comment">// =&gt; human</span></span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><hr><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul><li>函数声明</li><li>函数表达式</li><li><code>new Function</code></li></ul><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h4><ul><li>函数声明必须有名字</li><li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li><li>函数表达式类似于变量赋值</li><li>函数表达式可以没有名字，例如匿名函数</li><li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li></ul><p>下面是一个根据条件定义函数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码执行结果在不同浏览器中结果不一致。</p><p>不过我们可以使用函数表达式解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h3><ul><li>普通函数</li><li>构造函数</li><li>对象方法</li></ul><h3 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td></tr></tbody></table><p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p><h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><ul><li>所有函数都是 <code>Function</code> 的实例</li></ul><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p><p class="danger"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p><code>thisArg</code></p><ul><li>在 fun 函数运行时指定的 this 值</li><li>如果指定了 null 或者 undefined 则内部 this 指向 window</li></ul></li><li><p><code>arg1, arg2, ...</code></p><ul><li>指定的参数列表</li></ul></li></ul><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p><p class="danger"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>thisArg</code></li><li><code>argsArray</code></li></ul><p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(<span class="keyword">this</span>, [<span class="string">'eat'</span>, <span class="string">'bananas'</span>])</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p>thisArg</p><ul><li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li></ul></li><li><p>arg1, arg2, …</p><ul><li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li></ul></li></ul><p>返回值：</p><p>返回由指定的this值和初始化参数改造的原函数拷贝。</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LateBloomer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.petalCount = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare bloom after a delay of 1 second</span></span><br><span class="line">LateBloomer.prototype.bloom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>.declare.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LateBloomer.prototype.declare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am a beautiful flower with '</span> +</span><br><span class="line">    <span class="keyword">this</span>.petalCount + <span class="string">' petals!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flower = <span class="keyword">new</span> LateBloomer();</span><br><span class="line">flower.bloom();  <span class="comment">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li><p>call 和 apply 特性一样</p><ul><li>都是用来调用函数，而且是立即调用</li><li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li><li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li><li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li><li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li></ul></li><li><p>bind</p><ul><li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li><li>它和 call、apply 最大的区别是：bind 不会调用</li><li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul><li><ol><li>在 bind 的同时，以参数列表的形式进行传递</li></ol></li><li><ol><li>在调用的时候，以参数列表的形式进行传递</li></ol></li><li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li><li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li></ul></li></ul></li></ul><h3 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h3><ul><li>arguments<ul><li>实参集合</li></ul></li><li>caller<ul><li>函数的调用者</li></ul></li><li>length<ul><li>形参的个数</li></ul></li><li>name<ul><li>函数的名称</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li>函数可以作为参数</li><li>函数可以作为返回值</li></ul><h4 id="作为参数"><a href="#作为参数" class="headerlink" title="作为参数"></a>作为参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃完了'</span>)</span><br><span class="line">    callback()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eat(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'去唱歌'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFun</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isArray = genFun(<span class="string">'[object Array]'</span>)</span><br><span class="line"><span class="keyword">var</span> isObject = genFun(<span class="string">'[object Object]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isArray([])) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(count)</span><br><span class="line">    &#125;,</span><br><span class="line">    setCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fns = fn()</span><br><span class="line"></span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 0</span></span><br><span class="line">fns.setCount()</span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure><h4 id="作用域、作用域链、预解析"><a href="#作用域、作用域链、预解析" class="headerlink" title="作用域、作用域链、预解析"></a>作用域、作用域链、预解析</h4><ul><li>全局作用域</li><li>函数作用域</li><li><strong>没有块级作用域</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p>作用域链示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">30</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">40</span></span><br><span class="line">    <span class="built_in">console</span>.log(c + d)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn1()</span><br><span class="line">  fn2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内层作用域可以访问外层作用域，反之不行</li></ul><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包的用途：</p><ul><li>可以在函数外部读取函数内部成员</li><li>让函数内成员始终存活在内存中</li></ul><h4 id="一些关于闭包的例子"><a href="#一些关于闭包的例子" class="headerlink" title="一些关于闭包的例子"></a>一些关于闭包的例子</h4><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">222</span>)</span><br></pre></td></tr></table></figure><p>示例3：投票</p><p>示例4：判断类型</p><p>示例5：沙箱模式</p><h4 id="闭包的思考题"><a href="#闭包的思考题" class="headerlink" title="闭包的思考题"></a>闭包的思考题</h4><p>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;　　</span><br><span class="line"><span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><h4 id="递归执行模型"><a href="#递归执行模型" class="headerlink" title="递归执行模型"></a>递归执行模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line">  fn2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">  fn3()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">  fn4()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">444</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn4'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><h4 id="举个栗子：计算阶乘的递归函数"><a href="#举个栗子：计算阶乘的递归函数" class="headerlink" title="举个栗子：计算阶乘的递归函数"></a>举个栗子：计算阶乘的递归函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归应用场景"><a href="#递归应用场景" class="headerlink" title="递归应用场景"></a>递归应用场景</h4><ul><li>深拷贝等</li></ul><hr><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>了解正则表达式基本语法</li><li>能够使用JavaScript的正则对象</li></ul><h3 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h3><h4 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h4><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h4 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h4><ol><li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li><li>强大的字符串替换能力(替换)</li></ol><h4 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h4><ol><li>灵活性、逻辑性和功能性非常的强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂</li></ol><h3 id="正则表达式的测试"><a href="#正则表达式的测试" class="headerlink" title="正则表达式的测试"></a>正则表达式的测试</h3><ul><li><a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">在线测试正则</a></li><li>工具中使用正则表达式<ul><li>sublime/vscode/word</li><li>演示替换所有的数字</li></ul></li></ul><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><ul><li>普通字符</li><li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li></ul><p>示例演示：</p><ul><li><code>\d</code> 匹配数字</li><li><code>ab\d</code> 匹配 ab1、ab2</li></ul><h3 id="元字符串"><a href="#元字符串" class="headerlink" title="元字符串"></a>元字符串</h3><p>通过测试工具演示下面元字符的使用</p><h4 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class="line">[^]  匹配除中括号以内的内容</span><br><span class="line">\ 转义符</span><br><span class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class="line">() 从两个直接量中选择一个，分组</span><br><span class="line">   eg：gr(a|e)y匹配gray和grey</span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>验证手机号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">11</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮编：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">6</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证日期 2012-5-01</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮箱 <a href="mailto:xxx@itcast.cn" target="_blank" rel="noopener">xxx@itcast.cn</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+@\w+\.\w+$</span><br></pre></td></tr></table></figure><p>验证IP地址 192.168.1.10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\(.\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;$</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中使用正则表达式"><a href="#JavaScript-中使用正则表达式" class="headerlink" title="JavaScript 中使用正则表达式"></a>JavaScript 中使用正则表达式</h2><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><p>方式1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>gi</td><td>全局匹配+忽略大小写</td></tr></tbody></table><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配日期</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2015-10-10'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(dateStr));</span><br></pre></td></tr></table></figure><h3 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 提取工资</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"张三：1000，李四：5000，王五：8000。"</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 提取email地址</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com..."</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\w+@\w+\.\w+(\.\w+)?/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 分组提取  </span></span><br><span class="line"><span class="comment">// 3. 提取日期中的年部分  2015-5-10</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2016-1-5'</span>;</span><br><span class="line"><span class="comment">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(dateStr)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 提取邮件中的每一部分</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)(\.\w+)?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com"</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 替换所有空白</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"   123AD  asadf   asadfasf  adf "</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/\s/g</span>,<span class="string">"xx"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 替换所有,|，</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc,efg,123，abc,123，a"</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/,|，/g</span>, <span class="string">"."</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="案例：表单验证"><a href="#案例：表单验证" class="headerlink" title="案例：表单验证"></a>案例：表单验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtQQ"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtEMail"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtPhone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtBirthday"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtName"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文本框</span></span><br><span class="line"><span class="keyword">var</span> txtQQ = <span class="built_in">document</span>.getElementById(<span class="string">"txtQQ"</span>);</span><br><span class="line"><span class="keyword">var</span> txtEMail = <span class="built_in">document</span>.getElementById(<span class="string">"txtEMail"</span>);</span><br><span class="line"><span class="keyword">var</span> txtPhone = <span class="built_in">document</span>.getElementById(<span class="string">"txtPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> txtBirthday = <span class="built_in">document</span>.getElementById(<span class="string">"txtBirthday"</span>);</span><br><span class="line"><span class="keyword">var</span> txtName = <span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">txtQQ.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;5,12&#125;$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的QQ号"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//txtEMail</span></span><br><span class="line">txtEMail.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的EMail地址"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>表单验证部分，封装成函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regBirthday = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>;</span><br><span class="line">addCheck(txtBirthday, regBirthday, <span class="string">"请输入正确的出生日期"</span>);</span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">element, reg, tip</span>) </span>&#123;</span><br><span class="line">  element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">    <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">    <span class="comment">//判断验证是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">      <span class="comment">//验证不成功</span></span><br><span class="line">      span.innerText = tip;</span><br><span class="line">      span.style.color = <span class="string">"red"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//验证成功</span></span><br><span class="line">      span.innerText = <span class="string">""</span>;</span><br><span class="line">      span.style.color = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过给元素增加自定义验证属性对表单进行验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"frm"</span>&gt;</span></span><br><span class="line">  QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtQQ"</span> <span class="attr">data-rule</span>=<span class="string">"qq"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtEMail"</span> <span class="attr">data-rule</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtPhone"</span> <span class="attr">data-rule</span>=<span class="string">"phone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtBirthday"</span> <span class="attr">data-rule</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtName"</span> <span class="attr">data-rule</span>=<span class="string">"cn"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的验证规则</span></span><br><span class="line"><span class="keyword">var</span> rules = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'qq'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;5,12&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的QQ"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'email'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的邮箱地址"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;11&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的手机号码"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'date'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的出生日期"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'cn'</span>,</span><br><span class="line">    reg: <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的姓名"</span></span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">addCheck(<span class="string">'frm'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">formId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = <span class="number">0</span>,</span><br><span class="line">      frm =<span class="built_in">document</span>.getElementById(formId);</span><br><span class="line">  len = frm.children.length;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = frm.children[i];</span><br><span class="line">    <span class="comment">// 表单元素中有name属性的元素添加验证</span></span><br><span class="line">    <span class="keyword">if</span> (element.name) &#123;</span><br><span class="line">      element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 使用dataset获取data-自定义属性的值</span></span><br><span class="line">        <span class="keyword">var</span> ruleName = <span class="keyword">this</span>.dataset.rule;</span><br><span class="line">        <span class="keyword">var</span> rule =getRuleByRuleName(rules, ruleName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">        <span class="comment">//判断验证是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!rule.reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">          <span class="comment">//验证不成功</span></span><br><span class="line">          span.innerText = rule.tip;</span><br><span class="line">          span.style.color = <span class="string">"red"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//验证成功</span></span><br><span class="line">          span.innerText = <span class="string">""</span>;</span><br><span class="line">          span.style.color = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据规则的名称获取规则对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRuleByRuleName</span>(<span class="params">rules, ruleName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = rules.length;</span><br><span class="line">  <span class="keyword">var</span> rule = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rules[i].name == ruleName) &#123;</span><br><span class="line">      rule = rules[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="伪数组和数组"><a href="#伪数组和数组" class="headerlink" title="伪数组和数组"></a>伪数组和数组</h3><p>在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p><h4 id="对象与数组的关系"><a href="#对象与数组的关系" class="headerlink" title="对象与数组的关系"></a>对象与数组的关系</h4><p>在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。<br>所有 JavaScript 的内置构造函数都是继承自 <code>Object.prototype</code> 。<br>在这个前提下，可以理解为使用 <code>new Array()</code> 或 <code>[]</code> 创建出来的数组对象，都会拥有 <code>Object.prototype</code> 的属性值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="comment">// 拥有 Object.prototype 的属性值</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="comment">//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，</span></span><br><span class="line"><span class="comment">//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值</span></span><br></pre></td></tr></table></figure><p>可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。</p><h4 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h4><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"> </span><br><span class="line">obj[<span class="number">2</span>] = <span class="string">'a'</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">'a'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.length); <span class="comment">// =&gt; undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><ul><li>obj[2]输出’a’，是因为对象就是普通的键值对存取数据</li><li>而arr[2]输出’a’ 则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据</li><li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li><li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值</li><li>为什么arr.length输出3，而不是1<ul><li>在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数</li></ul></li></ul><h4 id="什么是伪数组"><a href="#什么是伪数组" class="headerlink" title="什么是伪数组"></a>什么是伪数组</h4><ol><li>拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li><li>不具有数组所具有的方法</li></ol><p>伪数组，就是像数组一样有 <code>length</code> 属性，也有 <code>0、1、2、3</code> 等属性的对象，看起来就像数组一样，但不是数组，比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fakeArray = &#123;</span><br><span class="line">  <span class="string">"0"</span>: <span class="string">"first"</span>,</span><br><span class="line">  <span class="string">"1"</span>: <span class="string">"second"</span>,</span><br><span class="line">  <span class="string">"2"</span>: <span class="string">"third"</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fakeArray.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fakeArray[i]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Array</span>.prototype.join.call(fakeArray,<span class="string">'+'</span>);</span><br></pre></td></tr></table></figure><p>常见的伪数组有：</p><ul><li>函数内部的 <code>arguments</code></li><li>DOM 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</li><li>jQuery 对象（比如 <code>$(&quot;div&quot;)</code> ）</li></ul><p>伪数组是一个 Object，而真实的数组是一个 Array。</p><p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 循环arguments对象</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// push</span></span><br><span class="line"><span class="comment">// some</span></span><br><span class="line"><span class="comment">// every</span></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;[].push.call(obj, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([].slice.call(obj))</span><br><span class="line"></span><br><span class="line">;[].forEach.call(obj, <span class="function"><span class="keyword">function</span> (<span class="params">num, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><ul><li>对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array</li><li>数组是基于索引的实现， length 会自动更新，而对象是键值对</li><li>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法</li></ul><h3 id="JavaScript-垃圾回收机制"><a href="#JavaScript-垃圾回收机制" class="headerlink" title="JavaScript 垃圾回收机制"></a>JavaScript 垃圾回收机制</h3><h3 id="JavaScript-运行机制：Event-Loop"><a href="#JavaScript-运行机制：Event-Loop" class="headerlink" title="JavaScript 运行机制：Event Loop"></a>JavaScript 运行机制：Event Loop</h3><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><ul><li>Object.assign()</li><li>Object.create()</li><li>Object.keys()</li><li>Object.defineProperty()</li></ul><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><ul><li>constructor</li><li>hasOwnProperty()</li><li>isPrototypeOf</li><li>propertyIsEnumerable()</li><li>toString()</li><li>valueOf()</li></ul><hr><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="A-代码规范"><a href="#A-代码规范" class="headerlink" title="A 代码规范"></a>A 代码规范</h3><h4 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h4><ul><li><a href="https://github.com/feross/standard" target="_blank" rel="noopener">JavaScript Standard Style </a></li><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb JavaScript Style Guide() {</a></li></ul><h4 id="校验工具"><a href="#校验工具" class="headerlink" title="校验工具"></a>校验工具</h4><ul><li><a href="https://github.com/douglascrockford/JSLint" target="_blank" rel="noopener">JSLint</a></li><li><a href="https://github.com/jshint/jshint" target="_blank" rel="noopener">JSHint</a></li><li><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">ESLint</a></li></ul><h3 id="B-Chrome-开发者工具"><a href="#B-Chrome-开发者工具" class="headerlink" title="B Chrome 开发者工具"></a>B Chrome 开发者工具</h3><h3 id="C-文档相关工具"><a href="#C-文档相关工具" class="headerlink" title="C 文档相关工具"></a>C 文档相关工具</h3><ul><li>电子文档制作工具: <a href="https://github.com/egoist/docute" target="_blank" rel="noopener">docute</a></li><li>流程图工具：<a href="http://logicnet.dk/DiagramDesigner/" target="_blank" rel="noopener">DiagramDesigner</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-高级&quot;&gt;&lt;a href=&quot;#JavaScript-高级&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 高级&quot;&gt;&lt;/a&gt;JavaScript 高级&lt;/h1&gt;&lt;h3 id=&quot;案例演示&quot;&gt;&lt;a href=&quot;#案例演示&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内置对象</title>
    <link href="http://yoursite.com/2018/07/22/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/07/22/内置对象/</id>
    <published>2018-07-22T05:52:45.000Z</published>
    <updated>2018-10-08T07:12:34.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="一、基本数据类型-与-引用数据类型的区别"><a href="#一、基本数据类型-与-引用数据类型的区别" class="headerlink" title="一、基本数据类型 与 引用数据类型的区别"></a>一、基本数据类型 与 引用数据类型的区别</h2><h3 id="1-1-回顾【了解】"><a href="#1-1-回顾【了解】" class="headerlink" title="1.1 回顾【了解】"></a>1.1 回顾【了解】</h3><ul><li><p>基本数据类型</p><blockquote><p>​    指的是简单的数据类型，有数字Number、字符串String、布尔Boolean、未定义Undefined、空Null。</p></blockquote></li><li><p>引用数据类型</p><blockquote><p>​    指的是复杂的数据类型，有数组Array、函数Function、对象等。</p></blockquote></li></ul><h3 id="1-2-内存中的栈和堆-【重点】"><a href="#1-2-内存中的栈和堆-【重点】" class="headerlink" title="1.2 内存中的栈和堆 【重点】"></a>1.2 内存中的栈和堆 【重点】</h3><ul><li><p>思考 </p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> num = <span class="number">123</span>;   <span class="comment">//基本数据类型</span></span><br><span class="line">&gt; <span class="keyword">var</span> a = num;</span><br><span class="line">&gt; a = <span class="number">456</span>;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(num);  <span class="comment">//num?</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]; <span class="comment">//引用数据类型</span></span><br><span class="line">&gt; <span class="keyword">var</span> arr2 = arr;</span><br><span class="line">&gt; arr2[<span class="number">0</span>] = <span class="string">'一一'</span>;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(arr[<span class="number">0</span>]);  <span class="comment">//arr[0]？</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>栈和堆</p><blockquote><ul><li>内存可以分为栈区 和 堆区</li><li>栈区：用来存储用var关键字创建的变量名 和 基本类型的数据。</li><li>堆区：用来存储引用类型的数据。</li></ul></blockquote></li></ul><h3 id="1-3-基本数据类型在内存中的存储方式-【重点】"><a href="#1-3-基本数据类型在内存中的存储方式-【重点】" class="headerlink" title="1.3 基本数据类型在内存中的存储方式 【重点】"></a>1.3 基本数据类型在内存中的存储方式 【重点】</h3><p><img src="/2018/07/22/内置对象/media/01.png" alt=""></p><h3 id="1-4-引用数据类型在内存中的存储方式-【重点】"><a href="#1-4-引用数据类型在内存中的存储方式-【重点】" class="headerlink" title="1.4 引用数据类型在内存中的存储方式 【重点】"></a>1.4 引用数据类型在内存中的存储方式 【重点】</h3><p><img src="/2018/07/22/内置对象/media/02.png" alt=""></p><h2 id="二-内置对象"><a href="#二-内置对象" class="headerlink" title="二.内置对象"></a>二.内置对象</h2><h3 id="2-1-对象分类-了解"><a href="#2-1-对象分类-了解" class="headerlink" title="2.1 对象分类 [了解]"></a>2.1 对象分类 [了解]</h3><ul><li><p>思考？</p><blockquote><p>请描述内置对象、宿主对象和自定义对象的区别？</p></blockquote></li><li><p>内置对象</p><blockquote><p>系统所提供的对象如：Object、Array、Math、Date等等。</p></blockquote></li><li><p>宿主对象</p><blockquote><p>JS所运行的环境提供的对象比如：BOM中的Window、DOM中的document；</p></blockquote></li><li><p>自定义对象</p><blockquote><p>自定义构造函数所创建的对象。</p></blockquote></li></ul><h3 id="2-2-如何学习内置对象-【重点】"><a href="#2-2-如何学习内置对象-【重点】" class="headerlink" title="2.2 如何学习内置对象 【重点】"></a>2.2 如何学习内置对象 【重点】</h3><ul><li><p>手册</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a></p><p>W3C在线或离线手册</p></blockquote></li><li><p>如何学习一个对象中的方法？</p><blockquote><ol><li>方法中功能</li><li>方法的参数和类型<br>2 方法的返回值</li><li>demo</li></ol></blockquote></li></ul><h3 id="2-3-Math对象-【重要】"><a href="#2-3-Math对象-【重要】" class="headerlink" title="2.3 Math对象 【重要】"></a>2.3 Math对象 【重要】</h3><ul><li><p>Math对象介绍</p><blockquote><p>​    Math本身就是一个对象，该对象中集合了很多关于数学运算的方法。也就是说，对于后期的一些复杂一些的数学运算，不需要自己动手去运算，直接调用Math对象中的方法实现即可</p></blockquote></li><li><p>Math对象常用的方法</p><blockquote><ul><li>Math.abs(数字);    获取一个数字的绝对对象</li><li>Math.round(数字);   四舍五入</li><li>Math.PI;    π</li><li>Math.ceil(数字);    向上取整</li><li>Math.floor(数字);  向下取整</li><li>Math.random();    随机数[0,1);</li><li>Math.max(数字,数字,数字…);    求最大数</li><li>Math.min(数字,数字,数字…);     求最小数</li></ul></blockquote></li></ul><h3 id="2-4-Date类型对象-【重要】"><a href="#2-4-Date类型对象-【重要】" class="headerlink" title="2.4 Date类型对象 【重要】"></a>2.4 Date类型对象 【重要】</h3><ul><li><p>Date类型对象介绍</p><blockquote><ul><li><p>Date类型对象是JavaScript提供的日期和时间的操作接口。它可以表示的时间范围是，1970年1月1日00:00:00前后的各1亿天（单位为毫秒）。</p></li><li><p>类型：Date</p></li><li><p>创建日期对象的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前时间</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="keyword">new</span> <span class="built_in">Date</span>(value);  <span class="comment">//value，传入的毫秒</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="keyword">new</span> <span class="built_in">Date</span>(dateString); <span class="comment">//字符串</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="keyword">new</span> <span class="built_in">Date</span>(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);<span class="comment">// 数字</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>Date类型对象常用的方法</p><blockquote><ul><li><p>获取设置年月日</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   getFullYear() / setFullYear(数字) 年</span><br><span class="line">&gt;</span><br><span class="line">&gt;   getMonth() / setMonth(数字)   月</span><br><span class="line">&gt;   注意：获取月份是从<span class="number">0</span>开始的</span><br><span class="line">&gt;</span><br><span class="line">&gt;   getDate() / setDate(数字)  <span class="comment">//日</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>获取星期几</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   getDay();   <span class="comment">//0-6（周日0到周六6）</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>获取设置时分秒毫秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   getHours()  /  setHours(数字) 时</span><br><span class="line">&gt;</span><br><span class="line">&gt;   getMinutes()  /  setMinutes(数字)分</span><br><span class="line">&gt;</span><br><span class="line">&gt;   getSeconds()  /  setMinutes(数字) 秒</span><br><span class="line">&gt;</span><br><span class="line">&gt;    getMilliseconds()  /  setMilliseconds(数字)  毫秒</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>获取设置毫秒1970年1月1日至今的毫秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   getTime();  <span class="regexp">/  setTime(数字);</span></span><br><span class="line"><span class="regexp">&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内置对象&quot;&gt;&lt;a href=&quot;#内置对象&quot; class=&quot;headerlink&quot; title=&quot;内置对象&quot;&gt;&lt;/a&gt;内置对象&lt;/h1&gt;&lt;h2 id=&quot;一、基本数据类型-与-引用数据类型的区别&quot;&gt;&lt;a href=&quot;#一、基本数据类型-与-引用数据类型的区别&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>函数、对象</title>
    <link href="http://yoursite.com/2018/07/07/%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/07/07/函数、对象/</id>
    <published>2018-07-07T08:20:10.000Z</published>
    <updated>2018-10-08T07:12:12.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数、对象"><a href="#函数、对象" class="headerlink" title="函数、对象"></a>函数、对象</h1><h2 id="一-函数"><a href="#一-函数" class="headerlink" title="一. 函数"></a>一. 函数</h2><h3 id="1-1-函数体内的aruments-【了解】"><a href="#1-1-函数体内的aruments-【了解】" class="headerlink" title="1.1 函数体内的aruments 【了解】"></a>1.1 函数体内的aruments 【了解】</h3><ul><li><p>思考</p><blockquote><p>写一个函数，实现计算用户输入任意个数字的总和 ?</p></blockquote></li><li><p>aruments</p><blockquote><ul><li><p>aruments，在函数体内可以使用。aruments中存放了所有的实参。</p></li><li><p>aruments的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     <span class="comment">//arguments可以暂时看成是一个函数内部提供的数组，集合了所有的实参。</span></span><br><span class="line">&gt;     <span class="comment">//arguments.length;  参数的个数</span></span><br><span class="line">&gt;     <span class="comment">//arguments[下标];   //获取一个实参</span></span><br><span class="line">&gt;     <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">&gt;     <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;<span class="built_in">arguments</span>.length;index++)&#123;</span><br><span class="line">&gt;       sum = sum + <span class="built_in">arguments</span>[index];</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="keyword">return</span> sum;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="keyword">var</span> result = getSum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>);</span><br><span class="line">&gt;   alert(result);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="1-2-预解析-【重要】"><a href="#1-2-预解析-【重要】" class="headerlink" title="1.2 预解析 【重要】"></a>1.2 预解析 【重要】</h3><ul><li><p>思考：</p><blockquote><ul><li><p>思考1？：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   alert(a);  <span class="comment">//报错</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>思考2：<br><img src="/2018/07/07/函数、对象/media/01.bmp" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;   对于js的执行顺序，默认是自上而下执行。</span></span><br><span class="line"><span class="comment">&gt;   对第一个alert(a)之前并没有创建变量。按道理应该报错。</span></span><br><span class="line"><span class="comment">&gt;   */</span></span><br><span class="line">&gt;   alert(a);     <span class="comment">//但是不会报错</span></span><br><span class="line">&gt;   <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">&gt;   alert(a);     </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>思考3：<br><img src="/2018/07/07/函数、对象/media/02.bmp" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   fn();   <span class="comment">//报错</span></span><br><span class="line">&gt;   <span class="comment">//函数表达式</span></span><br><span class="line">&gt;   <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     alert(<span class="number">1</span>);</span><br><span class="line">&gt;   &#125;;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>思考4：<br><img src="/2018/07/07/函数、对象/media/03.bmp" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   fn(); <span class="comment">//不报报错</span></span><br><span class="line">&gt;   <span class="comment">//函数声明</span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;    alert(<span class="number">1</span>); </span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>什么是预解析</p><blockquote><p>​    程序准备→执行。程序在执行之前，有个预备过程。 预备过程要做的事就是预解析。预备过程要做两件事，分别是： </p><ul><li>把用var关键字所声明的变量名（仅仅是变量名），提升到当前执行环境的顶部。</li><li>把用函数声明所创建的函数（函数整体），提升到当前执行环境的顶部。</li></ul></blockquote><p>​</p></li></ul><h3 id="1-3-作用域-【重要】"><a href="#1-3-作用域-【重要】" class="headerlink" title="1.3 作用域 【重要】"></a>1.3 作用域 【重要】</h3><ul><li><p>什么是作用域？</p><blockquote><p> 作用域，指的是变量或函数调用的使用范围。</p></blockquote></li><li><p>全局作用域</p><blockquote><ul><li><p>什么是全局作用域？</p><blockquote><p>函数之外的执行环境，就是全局作用域。</p></blockquote></li><li><p>全局变量</p><blockquote><p>在全局作用域中用var关键字所创建的变量，就是全局变量。</p><p>全局变量的作用范围是程序中的任何地方。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">var</span> a = <span class="number">123</span>;   <span class="comment">//a是全局变量</span></span><br><span class="line">&gt;   &gt; <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;   &gt;   alert(a);   <span class="comment">//123;</span></span><br><span class="line">&gt;   &gt; &#125;</span><br><span class="line">&gt;   &gt; fn();</span><br><span class="line">&gt;   &gt; alert(a);  <span class="comment">//123;</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote></li><li><p>局部作用域</p><blockquote><ul><li><p>什么是局部作用域？</p><blockquote><p>函数体内的环境，就是局部作用域。</p></blockquote></li><li><p>局部变量</p><blockquote><p>在局部作用域中用var关键字所创建的变量，就是局部变量。<br>局部变量的作用范围是，仅仅是本函数体内使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   &gt;   <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">&gt;   &gt;   alert(a);</span><br><span class="line">&gt;   &gt; &#125;</span><br><span class="line">&gt;   &gt; alert(a); <span class="comment">//报错</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li><p>函数的形参可以看成是局部变量</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">&gt;   &gt;   alert(a);</span><br><span class="line">&gt;   &gt; &#125;</span><br><span class="line">&gt;   &gt; alert(a); <span class="comment">//报错</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote></li><li><p>再看预解析</p><blockquote><ul><li><p>思考？<br><img src="/2018/07/07/函数、对象/media/04.bmp" alt=""></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">&gt;   &gt; <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   &gt;   <span class="built_in">console</span>.log(a);  <span class="comment">//a的值 undefined;</span></span><br><span class="line">&gt;   &gt;   <span class="keyword">var</span> a = <span class="number">456</span>;</span><br><span class="line">&gt;   &gt; &#125;</span><br><span class="line">&gt;   &gt; fn();</span><br><span class="line">&gt;   &gt; <span class="built_in">console</span>.log(a);   <span class="comment">//a的值 123</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li><p>预解析中的变量提升，说是提升到当前执行环境的顶部。 当前执行环境指的是当前作用域。</p></li><li><p>在局部作用域中使用一个变量时，若局部变量 和 全局变量重名时，在局部作用域中会优先使用局部变量。</p></li></ul></blockquote></li><li><p>作用域链</p><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&gt;     <span class="keyword">var</span> b = <span class="string">'2b'</span>;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;       <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">&gt;       <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;         <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">&gt;         <span class="built_in">console</span>.log(a);   <span class="comment">//a的值 ?</span></span><br><span class="line">&gt;         consoe.log(b);    <span class="comment">//b的值 ?</span></span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;       </span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>图解作用域链</p><blockquote><ul><li>什么是作用域链？<br>​    当访问一个变量时，会先从本作用域中去找这个变量中去找，若找不到则向上一级作用域中去找，依次类推，就形成了一个作用域链。</li><li>图解<br><img src="/2018/07/07/函数、对象/media/01.png" alt=""></li></ul></blockquote></li></ul></blockquote></li><li><p>JS中没有块级作用域 【扩展】</p><blockquote><ul><li><p>什么是块级作用域</p><blockquote><p>​    在其他编程语言中，如java、c#等，在if语句、循环语句中创建的变量，仅仅只能在本if语句、本循环语句中使用。如下Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">&gt;   &gt;   <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">&gt;   &gt;   system.out.print(num);  <span class="comment">//123;</span></span><br><span class="line">&gt;   &gt; &#125;</span><br><span class="line">&gt;   &gt; system.out.print(num); <span class="comment">//报错</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li><p>JS中没有块级作用域</p><blockquote><p>JS中没有块级作用域【ES5版本之前】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;<span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">&gt;   &gt;  <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">&gt;   &gt;  <span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">//123</span></span><br><span class="line">&gt;   &gt;&#125;</span><br><span class="line">&gt;   &gt;<span class="built_in">console</span>.log(<span class="number">123</span>);  <span class="comment">//123;</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><p>  ​</p></blockquote></li></ul><h3 id="1-4-回调函数-【重要】"><a href="#1-4-回调函数-【重要】" class="headerlink" title="1.4 回调函数 【重要】"></a>1.4 回调函数 【重要】</h3><ul><li><p>回顾函数的参数</p><blockquote><ul><li>形参</li><li>实参</li><li>函数也是数据，类型是 Function</li></ul></blockquote></li><li><p>什么是回调函数</p><blockquote><p>回调函数，就是函数可以当做实参传递给另一个函数的实参并在另一个函数内部中调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt; 方式一：</span></span><br><span class="line"><span class="comment">&gt; */</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">&gt;   f();</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   alert(<span class="string">'执行'</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; fn(test);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt; 方式二：</span></span><br><span class="line"><span class="comment">&gt; */</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">&gt;   f();</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; fn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   alert(<span class="string">'执行'</span>);</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>​</p></blockquote></li></ul><h3 id="1-5-匿名函数和自执行函数-【重点】"><a href="#1-5-匿名函数和自执行函数-【重点】" class="headerlink" title="1.5 匿名函数和自执行函数 【重点】"></a>1.5 匿名函数和自执行函数 【重点】</h3><ul><li><p>匿名函数</p><blockquote><p>匿名函数就是没有名字的函数。在js中匿名函数需要配合运算符使用。<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//匿名函数 常用</span></span><br><span class="line">&gt; (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   alert(<span class="number">1</span>);</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//匿名函数</span></span><br><span class="line">&gt; !<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   alert(<span class="number">1</span>);</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//匿名函数</span></span><br><span class="line">&gt; -<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   alert(<span class="number">1</span>);</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>自执行函数（自调用函数）</p><blockquote><p>自执行函数就是匿名函数创建后马上执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//匿名函数 常用</span></span><br><span class="line">&gt;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;  alert(<span class="number">1</span>);</span><br><span class="line">&gt;&#125;)();</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="comment">//匿名函数</span></span><br><span class="line">&gt;!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;  alert(<span class="number">1</span>);</span><br><span class="line">&gt;&#125;();</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="comment">//匿名函数</span></span><br><span class="line">&gt;-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;  alert(<span class="number">1</span>);</span><br><span class="line">&gt;&#125;();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>匿名函数和自定义函数的优点</p><blockquote><ul><li>可以模拟块级作用域</li><li>可以避免全局变量污染​</li></ul></blockquote></li></ul><h2 id="二-对象"><a href="#二-对象" class="headerlink" title="二. 对象"></a>二. 对象</h2><h3 id="2-1-为什么要学习对象-【了解】"><a href="#2-1-为什么要学习对象-【了解】" class="headerlink" title="2.1 为什么要学习对象 【了解】"></a>2.1 为什么要学习对象 【了解】</h3><blockquote><p>​    后面的很多知识点都是通过对象调用出来的，所以我们必须务必知道对象组织数据的方式。</p></blockquote><h3 id="2-2-什么是对象-【重要】"><a href="#2-2-什么是对象-【重要】" class="headerlink" title="2.2 什么是对象 【重要】"></a>2.2 什么是对象 【重要】</h3><ul><li><p>对象的概念</p><blockquote><p>从两个层面理解：</p><ul><li><p>生活层面，对象是单个事物抽象出来的实例。</p><blockquote><p>​    “万物皆对象”，一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。<br><img src="/2018/07/07/函数、对象/media/03.png" alt=""></p></blockquote></li><li><p>数据层面，对象是一个容器，封装了属性和方法。</p><blockquote><ul><li>对象是一种数据，属于引用类型的数据</li><li>属性：对象的静态特征。</li><li>方法：对象的动态特征。</li><li><img src="/2018/07/07/函数、对象/media/04.png" alt=""></li></ul></blockquote></li></ul></blockquote></li></ul><h3 id="2-3-对象的创建方式-【重要】"><a href="#2-3-对象的创建方式-【重要】" class="headerlink" title="2.3 对象的创建方式 【重要】"></a>2.3 对象的创建方式 【重要】</h3><ul><li><p>类和对象</p><blockquote><ul><li><p>类</p><blockquote><p>抽象出的模板。</p></blockquote></li><li><p>对象</p><blockquote><p>具体的实例。</p></blockquote></li><li><p>类和对象的关系</p><blockquote><p>类是对象的模板，对象是类的实例。<br>对象需要通过类来创建：具体语法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">var</span> 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><blockquote><p><img src="/2018/07/07/函数、对象/media/05.png" alt=""></p></blockquote></blockquote></li></ul><ul><li><p>方式一：通过Object类创建</p><blockquote><ul><li><p>Object 类是系统提供的一个类，可以直接使用。</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> hero1 = <span class="keyword">new</span> <span class="built_in">Object</span>();  <span class="comment">//空的对象，里面属性和方法</span></span><br><span class="line">&gt;   <span class="comment">//字面量创建</span></span><br><span class="line">&gt;   <span class="comment">//var hero1 = &#123;&#125;;   //和new Object()性质一样，空的对象，里面属性和方法</span></span><br><span class="line">&gt;   hero1.name = <span class="string">'孙悟空'</span>;</span><br><span class="line">&gt;   hero1.age = <span class="number">18</span>;</span><br><span class="line">&gt;   hero1.attack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     alert(<span class="keyword">this</span>.name + <span class="string">'发动攻击...'</span>);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   hero01.attack();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>方式二：通过自定义构造函数创建（自定义类）</p><blockquote><ul><li><p>在es6之前，js中没有类的概念，但可以通过构造函数模拟。</p></li><li><p>构造函数</p><blockquote><p>构造函数，可以用来创建并初始化对象。</p></blockquote></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//创建构造函数。和普通函数创建方式一样，当命名时首字母要大写（帕斯卡命名）</span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2.</span>..</span>)</span>&#123;</span><br><span class="line">&gt;     <span class="comment">//this表示通过new创建的哪个当前的对象</span></span><br><span class="line">&gt;     <span class="keyword">this</span>.键 = 参数<span class="number">1</span>;</span><br><span class="line">&gt;     <span class="keyword">this</span>.键 = 参数<span class="number">2</span>;</span><br><span class="line">&gt;     ...</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="comment">//通过构造函数创建对像</span></span><br><span class="line">&gt;   <span class="keyword">var</span> 对象<span class="number">1</span> = <span class="keyword">new</span> 函数名(实参<span class="number">1</span>,实参<span class="number">2.</span>..);</span><br><span class="line">&gt;     </span><br><span class="line">&gt;   <span class="comment">//new 关键字执行的过程</span></span><br><span class="line">&gt;   ① 在函数体内创建一个空的对象（看不见）</span><br><span class="line">&gt;   ② 让当前<span class="keyword">this</span>指向这个空的对象</span><br><span class="line">&gt;   ③ 通过<span class="keyword">this</span>给当前空的对象添加键值对</span><br><span class="line">&gt;   ④ 返回已经添加好所有键值对的对象给外面的变量。（看不见）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;   自定义构造函数（类） Hero</span></span><br><span class="line"><span class="comment">&gt;   */</span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">&gt;     <span class="keyword">this</span>.name = name;</span><br><span class="line">&gt;     <span class="keyword">this</span>.age = age;</span><br><span class="line">&gt;     <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;       <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">',我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁'</span>);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="keyword">this</span>.attack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;       <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'发动攻击...'</span>)</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;   通过自定义构造函数创建对象</span></span><br><span class="line"><span class="comment">&gt;   */</span></span><br><span class="line">&gt;   <span class="keyword">var</span> wuKong = <span class="keyword">new</span> Hero(<span class="string">'孙悟空'</span>,<span class="number">18</span>);</span><br><span class="line">&gt;   wuKong.sayHi();</span><br><span class="line">&gt;   wuKong.attack();</span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="keyword">var</span> baJie = <span class="keyword">new</span> Hero(<span class="string">'猪八戒'</span>,<span class="number">20</span>);</span><br><span class="line">&gt;   baJie.sayHi();</span><br><span class="line">&gt;   wuKong.attack();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="2-4-对象的操作-【重要】"><a href="#2-4-对象的操作-【重要】" class="headerlink" title="2.4 对象的操作 【重要】"></a>2.4 对象的操作 【重要】</h3><ul><li><p>对象组织数据的方式：</p><blockquote><p>对象组织数据的方式是： 键值对象。</p><ul><li>键，指的是属性名或方法名。</li><li>值，指的是实际的数据。</li></ul></blockquote></li><li><p>给对象增加属性和方法：</p><blockquote><ul><li><p>对象名.键名 = 值;</p></li><li><p>对象名[‘键名’] = 值;</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> dog1 = &#123;&#125;;</span><br><span class="line">&gt;   dog1.name = <span class="string">'旺财'</span>; <span class="comment">//属性</span></span><br><span class="line">&gt;   dog1[<span class="string">'age'</span>] = <span class="number">1</span>;    <span class="comment">//属性</span></span><br><span class="line">&gt;   dog1.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//方法</span></span><br><span class="line">&gt;     alert(<span class="keyword">this</span>.name + <span class="string">'在汪汪叫...'</span>)</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//注意，方法要用函数来表示</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>访问对象中的属性和方法：</p><blockquote><ul><li><p>对象.键名;</p></li><li><p>对象[‘键名’];</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> dog1 = &#123;&#125;;</span><br><span class="line">&gt;   dog1.name = <span class="string">'旺财'</span>; <span class="comment">//属性</span></span><br><span class="line">&gt;   dog1[<span class="string">'age'</span>] = <span class="number">1</span>;    <span class="comment">//属性</span></span><br><span class="line">&gt;   dog1.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//方法</span></span><br><span class="line">&gt;     alert(<span class="keyword">this</span>.name + <span class="string">'在汪汪叫...'</span>)</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//注意，方法要用函数来表示</span></span><br><span class="line">&gt;   dog1.call(); <span class="comment">//调用</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(dog1[<span class="string">'name'</span>]);</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(dog1.age);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>删除对象中的属性和方法：</p><blockquote><ul><li><p>delete 对象.键名;</p></li><li><p>delete 对象[‘键名’];</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> dog1 = &#123;</span><br><span class="line">&gt;   name:<span class="string">'旺财'</span>,</span><br><span class="line">&gt;   age:<span class="number">1</span>,</span><br><span class="line">&gt;   call:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;         alert(<span class="keyword">this</span>.name + <span class="string">'在汪汪叫...'</span>)</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   &#125;;</span><br><span class="line">&gt;   <span class="comment">//删除之前访问</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(dog1.name); <span class="comment">//旺财</span></span><br><span class="line">&gt;   <span class="comment">//删除</span></span><br><span class="line">&gt;   <span class="keyword">delete</span> dog.name;</span><br><span class="line">&gt;   <span class="comment">//删除之后访问</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(dog1.name); <span class="comment">//undefiend</span></span><br><span class="line">&gt;   <span class="comment">//检测对中是否还要name属性</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(dog1.hasOwnProperty(<span class="string">'name'</span>));  <span class="comment">//false;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>检测一个对象中是否存在某个属性或方法：</p><blockquote><p>对象.hasOwnProperty(‘键名’);  //返回boolean值，false表示不存在，true表示存在</p></blockquote></li><li><p>遍历对象中的键值对</p><blockquote><ul><li><p>遍历方式 for-in</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">&gt;     <span class="comment">//key 是对象中的每一个键</span></span><br><span class="line">&gt;     <span class="comment">//对象[key]; </span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> student1 = &#123;</span><br><span class="line">&gt;     name:<span class="string">'张三'</span>,</span><br><span class="line">&gt;     age:<span class="number">17</span>,</span><br><span class="line">&gt;     gender:<span class="string">'男'</span>,</span><br><span class="line">&gt;     scroe:<span class="number">100</span></span><br><span class="line">&gt;   &#125;;</span><br><span class="line">&gt;   <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> student1)&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(student1[key]);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>检测一个对象的数据类型</p><blockquote><ul><li><p>对象是引用数据类型，检测对象时不要用typeof去检测，要用instanceof</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   对象 <span class="keyword">instanceof</span> 构造函数名;    <span class="comment">//返回boolean值，true表示属于，false表示不属于</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;   创建构造函数 Person</span></span><br><span class="line"><span class="comment">&gt;   */</span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">&gt;     <span class="keyword">this</span>.name = name;</span><br><span class="line">&gt;     <span class="keyword">this</span>.age = age;</span><br><span class="line">&gt;     <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">// 创建一个Person类型的对象 p1</span></span><br><span class="line">&gt;   <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>,<span class="number">17</span>,<span class="string">'男'</span>);</span><br><span class="line">&gt;   <span class="comment">//检测对象p1是否属于Person</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person);  <span class="comment">//true</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="2-5-this-指向问题-【重要】"><a href="#2-5-this-指向问题-【重要】" class="headerlink" title="2.5 this 指向问题 【重要】"></a>2.5 this 指向问题 【重要】</h3><ul><li><p>this 介绍</p><blockquote><pre><code>this是一个关键字，这个关键字在程序执行时会指向不同的对象。也就是说这个this到底指向谁？得看程序的执行情况。</code></pre></blockquote></li><li><p>构造函数和普通函数调用时，this指向不同的对象</p><blockquote><ul><li><p>this指向 window对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     <span class="keyword">this</span>.name = <span class="string">'张三'</span>;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//window</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">// Person当做普通函数调用</span></span><br><span class="line">&gt;   Person();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>this指向被创建的实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     <span class="keyword">this</span>.name = <span class="string">'张三'</span>;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//Person类型的一个实例对象</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//Person当做构造函数调用</span></span><br><span class="line">&gt;   <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数、对象&quot;&gt;&lt;a href=&quot;#函数、对象&quot; class=&quot;headerlink&quot; title=&quot;函数、对象&quot;&gt;&lt;/a&gt;函数、对象&lt;/h1&gt;&lt;h2 id=&quot;一-函数&quot;&gt;&lt;a href=&quot;#一-函数&quot; class=&quot;headerlink&quot; title=&quot;一. 函数
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数组、函数</title>
    <link href="http://yoursite.com/2018/06/20/%E6%95%B0%E7%BB%84%E3%80%81%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/20/数组、函数/</id>
    <published>2018-06-20T09:48:15.000Z</published>
    <updated>2018-10-08T07:11:51.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组、函数"><a href="#数组、函数" class="headerlink" title="数组、函数"></a>数组、函数</h1><h2 id="一-数组"><a href="#一-数组" class="headerlink" title="一. 数组"></a>一. 数组</h2><h3 id="1-1-为什么学习数组-【了解】"><a href="#1-1-为什么学习数组-【了解】" class="headerlink" title="1.1 为什么学习数组 【了解】"></a>1.1 为什么学习数组 【了解】</h3><blockquote><p>思考：<br>​    之前学习的数据类型，只能存储一个值(比如：Number/String）。我们想存储班级中所有学生的姓名，此时该如何存储？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">var</span> name1 = <span class="string">'张三'</span>;</span><br><span class="line">&gt;<span class="keyword">var</span> name2 = <span class="string">'李四'</span>;</span><br><span class="line">&gt;<span class="keyword">var</span> name3 = <span class="string">'王五'</span>;</span><br><span class="line">&gt;<span class="keyword">var</span> name4 = <span class="string">'赵六'</span>;</span><br><span class="line">&gt;<span class="comment">//...</span></span><br><span class="line">&gt;<span class="comment">//缺点：变量声明太多，造成代码冗余，数据难易维护和管理。</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-2-数组的概念-【了解】"><a href="#1-2-数组的概念-【了解】" class="headerlink" title="1.2 数组的概念 【了解】"></a>1.2 数组的概念 【了解】</h3><ul><li><p>什么是数组？</p><blockquote><p>​    所谓数组，就是将多个数据（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。</p></blockquote></li><li><p>数组中的数据是有序的</p><blockquote><p>​    数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。<br>注意：这里的顺序指的是数组中每个数据的编号。</p></blockquote></li><li><p>数组是一个引用类型的数据</p><blockquote><p>​     数组也是数据，将来也会存放在内存中。数组可以集合多个数据，是属于引用类型的数据。</p></blockquote></li></ul><h3 id="1-3-数组的创建和使用【重要】"><a href="#1-3-数组的创建和使用【重要】" class="headerlink" title="1.3 数组的创建和使用【重要】"></a>1.3 数组的创建和使用【重要】</h3><ul><li><p>创建数组</p><blockquote><p>数组有两种创建方式，今天先学习一种。</p><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> 变量名 = [];   <span class="comment">//空的数组</span></span><br><span class="line">&gt;   <span class="keyword">var</span> 变量名 = [数据,数据,数据...]; <span class="comment">//一组数据</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//用数组存放一组名字</span></span><br><span class="line">&gt;   <span class="keyword">var</span> names = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'陈七'</span>,<span class="string">'刘八'</span>,<span class="string">'秦九'</span>];</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>访问数组中的数据</p><blockquote><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//数组中的数据是有下标的（索引或编号），下标是有序的，从0开始。</span></span><br><span class="line">&gt;   <span class="comment">// 下标        0    1   2   3  ...</span></span><br><span class="line">&gt;   <span class="keyword">var</span> 数组名 = [数据,数据,数据,数据...];</span><br><span class="line">&gt;   <span class="comment">//通过下标获取数组中指定的数据</span></span><br><span class="line">&gt;   数组名[下标];</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//数组，存放一组名字</span></span><br><span class="line">&gt;   <span class="keyword">var</span> names = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'陈七'</span>,<span class="string">'刘八'</span>,<span class="string">'秦九'</span>];</span><br><span class="line">&gt;   <span class="comment">//获取 李四</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(names[<span class="number">1</span>]);</span><br><span class="line">&gt;   <span class="comment">//获取 赵六</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(names[<span class="number">3</span>]);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>数组的长度</p><blockquote><ul><li><p>数组的长度，指的数组中数据的个数。</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   数组名.length;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//数组，存放一组名字</span></span><br><span class="line">&gt;   <span class="keyword">var</span> names = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'陈七'</span>,<span class="string">'刘八'</span>,<span class="string">'秦九'</span>];</span><br><span class="line">&gt;   <span class="comment">//获取数组中存储了少个人的名字</span></span><br><span class="line">&gt;   <span class="built_in">console</span>.log(names.length); <span class="comment">//7</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>修改数组中的数据</p><blockquote><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   数组名[下标] = 数据;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> names = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'陈七'</span>,<span class="string">'刘八'</span>,<span class="string">'秦九'</span>];</span><br><span class="line">&gt;   <span class="comment">//把数组中的第一个数据 '张三' 修改为 'zhangsan'</span></span><br><span class="line">&gt;   names[<span class="number">0</span>] = <span class="string">'zhangsan'</span>;</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(names[<span class="number">0</span>]); <span class="comment">//zhangsan</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>向数组中新增数据</p><blockquote><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   数组名[数组名.length] = 数据;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> names = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'陈七'</span>,<span class="string">'刘八'</span>,<span class="string">'秦九'</span>];</span><br><span class="line">&gt;   <span class="comment">//给数组新添加一个数据</span></span><br><span class="line">&gt;   names[names.length] = <span class="string">'周十'</span>;</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(names); <span class="comment">//'张三','李四','王五','赵六','陈七','刘八','秦九',周十</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>遍历数组</p><blockquote><ul><li><p>遍历数组，就是通过循环的方式获取数组中的每一个数据</p></li><li><p>遍历方式： for 循环</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   for(var 变量 = 0;变量&lt;数组名.length;变量++) &#123;</span><br><span class="line">&gt;   //数组名[变量]</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> names = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>,<span class="string">'陈七'</span>,<span class="string">'刘八'</span>,<span class="string">'秦九'</span>];</span><br><span class="line">&gt;   <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;names.length;index++)&#123;</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(names[index]);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="1-4-冒泡排序-【了解】"><a href="#1-4-冒泡排序-【了解】" class="headerlink" title="1.4  冒泡排序 【了解】"></a>1.4  冒泡排序 【了解】</h3><ul><li><p>什么是冒泡排序？</p><blockquote><p>​    冒泡排序（Bubble Sort），是一种<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="noopener">计算机科学</a>领域的较简单的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">排序算法</a>。</p><p>​    它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><p>​    这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名。</p></blockquote></li><li><p>图解冒泡排序</p><blockquote><p><img src="/2018/06/20/数组、函数/media/01.png" alt=""></p></blockquote></li></ul><h2 id="二-函数"><a href="#二-函数" class="headerlink" title="二.函数"></a>二.函数</h2><h3 id="2-1-为什么学习函数"><a href="#2-1-为什么学习函数" class="headerlink" title="2.1 为什么学习函数"></a>2.1 为什么学习函数</h3><ul><li><p>思考：</p><blockquote><p>如果要在多个地方求1-100之间所有偶数，应该怎么做？</p></blockquote></li></ul><h3 id="2-2-函数的概念和作用"><a href="#2-2-函数的概念和作用" class="headerlink" title="2.2 函数的概念和作用"></a>2.2 函数的概念和作用</h3><ul><li><p>函数的概念</p><blockquote><p>函数，简单理解就是一个功能、方法，功能可以反复调用。<br>也是一种数据，属于引用数据类型的数据，类型为Function</p></blockquote></li><li><p>函数的作用</p><blockquote><p>封装性，将执行代码封闭在一个独立的执行环境中。可以反复调用，减少代码冗余。</p></blockquote></li></ul><h3 id="2-3-函数的创建和调用"><a href="#2-3-函数的创建和调用" class="headerlink" title="2.3  函数的创建和调用"></a>2.3  函数的创建和调用</h3><ul><li><p>语法：</p><blockquote><ul><li><p>函数声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//创建函数方式一</span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;     <span class="comment">//函数名和变量名的命名规则规范一样 </span></span><br><span class="line">&gt;     <span class="comment">//函数体</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//函数创建完后，函数体中的代码不会执行，只用调用时才会执行</span></span><br><span class="line">&gt;   <span class="comment">//调用函数</span></span><br><span class="line">&gt;   函数名();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//创建函数方式二</span></span><br><span class="line">&gt;   <span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     <span class="comment">//函数体</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//调用函数</span></span><br><span class="line">&gt;   函数名();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>代码：</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//创建函数</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">getEven</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;   <span class="keyword">for</span>(<span class="keyword">var</span> num = <span class="number">1</span>;num&lt;=<span class="number">100</span>;num++)&#123;</span><br><span class="line">&gt;     <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">&gt;       <span class="built_in">document</span>.write(num + <span class="string">'&lt;br&gt;'</span>);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//调用函数</span></span><br><span class="line">&gt; getEven();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="2-4-函数的参数"><a href="#2-4-函数的参数" class="headerlink" title="2.4 函数的参数"></a>2.4 函数的参数</h3><ul><li><p>思考</p><blockquote><p>计算n-m之间所有数字的和？</p></blockquote></li><li><p>参数</p><blockquote><ul><li>参数可用分为形参和实参</li><li>形参，在函数创建时，在小扩号中定义的标识符。</li><li>实参，在函数调用时，在小扩号中所传入的实际的数据。</li></ul></blockquote></li><li><p>语法</p><blockquote><ul><li><p>函数声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参,形参,形参...</span>) </span>&#123;<span class="comment">//形参，就是一个占位符，命名规则和规范和变量一样</span></span><br><span class="line">&gt;   <span class="comment">//函数体</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   函数名(数据,数据,数据...);   <span class="comment">//实参，就是实际的数据</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">形参,形参,形参...</span>) </span>&#123;<span class="comment">//形参，就是一个占位符，命名规则和规范和变量一样</span></span><br><span class="line">&gt;   <span class="comment">//函数体</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   函数名(数据,数据,数据...);   <span class="comment">//实参，就是实际的数据</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>代码</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// 需求： n-m之间所有数字的和</span></span><br><span class="line">&gt; <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt; 形参：</span></span><br><span class="line"><span class="comment">&gt; n:起始数字</span></span><br><span class="line"><span class="comment">&gt; m:终止数字</span></span><br><span class="line"><span class="comment">&gt; */</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">n,m</span>)</span>&#123;</span><br><span class="line">&gt;   <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">&gt;   <span class="keyword">for</span>(<span class="keyword">var</span> num = n;n&lt;=m;n++)&#123;</span><br><span class="line">&gt;     sum+=n;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="built_in">document</span>.write(<span class="string">'总和是：'</span> + sum);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; getSum(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="2-5-函数的返回值"><a href="#2-5-函数的返回值" class="headerlink" title="2.5 函数的返回值"></a>2.5 函数的返回值</h3><ul><li><p>思考？</p><blockquote><p>在不同的地方以不同的颜色打印出任意n-m之间所有数字的和。</p></blockquote></li><li><p>return 关键字</p><blockquote><ul><li><p>作用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   ① 可以终止函数的执行。</span><br><span class="line">&gt;   ② 可以将数据返回。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">// return 关键字，要在函数体内使用</span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参列表</span>) </span>&#123;</span><br><span class="line">&gt;     <span class="comment">//函数体内没有return时; 函数默认返回undefined</span></span><br><span class="line">&gt;     <span class="comment">//return 数据;  //终止函数，并返回数据。</span></span><br><span class="line">&gt;     <span class="comment">//return;   //终止函数，并返回undefined</span></span><br><span class="line">&gt;     </span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">n,m</span>)</span>&#123;</span><br><span class="line">&gt;     <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">&gt;     <span class="keyword">for</span>(<span class="keyword">var</span> num = n;n&lt;=m;n++)&#123;</span><br><span class="line">&gt;       sum+=n;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="keyword">return</span> sum;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="keyword">var</span> result = getSum(<span class="number">1</span>,<span class="number">100</span>); <span class="comment">//函数调用完后会返回结果</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组、函数&quot;&gt;&lt;a href=&quot;#数组、函数&quot; class=&quot;headerlink&quot; title=&quot;数组、函数&quot;&gt;&lt;/a&gt;数组、函数&lt;/h1&gt;&lt;h2 id=&quot;一-数组&quot;&gt;&lt;a href=&quot;#一-数组&quot; class=&quot;headerlink&quot; title=&quot;一. 数组
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js基础语法02</title>
    <link href="http://yoursite.com/2018/06/10/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%9502/"/>
    <id>http://yoursite.com/2018/06/10/js基础语法02/</id>
    <published>2018-06-10T06:37:33.000Z</published>
    <updated>2018-10-08T07:11:19.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript语法基础02"><a href="#JavaScript语法基础02" class="headerlink" title="JavaScript语法基础02"></a>JavaScript语法基础02</h1><h2 id="一-表达式和语句"><a href="#一-表达式和语句" class="headerlink" title="一. 表达式和语句"></a>一. 表达式和语句</h2><h3 id="1-1-表达式-【了解】"><a href="#1-1-表达式-【了解】" class="headerlink" title="1.1 表达式 【了解】"></a>1.1 表达式 【了解】</h3><ul><li><p>什么是表达式？</p><blockquote><p>​    一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">'张三'</span>==<span class="string">'李四'</span>;   <span class="comment">//true</span></span><br><span class="line">&gt; <span class="number">20</span>*<span class="number">2</span>+<span class="number">4</span>;  <span class="comment">//44</span></span><br><span class="line">&gt; <span class="string">'不要在年轻的时候选择安逸'</span>; <span class="comment">//字面量</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>常识</p><blockquote><ul><li>只能操作一个值的操作符叫一元操作符,组成的表达式叫一元表达式.(一个值一个运算符)</li><li>由两个值和一个运算符连接起来的表达式叫二元表达式。(两个值一个运算符)</li><li>由三个值和两个运算符连接起来的表达式叫三元表达式.(三个值两个运算符)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">-1</span>; <span class="comment">//一元表达式</span></span><br><span class="line">&gt; <span class="number">1</span> + <span class="number">1</span>; <span class="comment">//二元表达式</span></span><br><span class="line">&gt; <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">&gt; age&gt;=<span class="number">18</span>?<span class="string">'成年'</span>:<span class="string">'未成年'</span>; <span class="comment">//三元表达式</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="1-2-语句-【了解】"><a href="#1-2-语句-【了解】" class="headerlink" title="1.2 语句 【了解】"></a>1.2 语句 【了解】</h3><ul><li><p>什么是语句？</p><blockquote><p>​    语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> age = <span class="number">18</span>;    <span class="comment">//这是一个赋值的行为，把18赋值给变量age</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="二-流程控制"><a href="#二-流程控制" class="headerlink" title="二. 流程控制"></a>二. 流程控制</h2><h3 id="2-1-什么是流程控制？【重要】"><a href="#2-1-什么是流程控制？【重要】" class="headerlink" title="2.1 什么是流程控制？【重要】"></a>2.1 什么是流程控制？【重要】</h3><blockquote><p>简单来说，就是控制程序的执行顺序。对于流程控制，可以分为三种结构。分别是：</p><ul><li>顺序结构</li><li>分支结构</li><li>循环结构</li></ul></blockquote><h3 id="2-2-顺序结构-【了解】"><a href="#2-2-顺序结构-【了解】" class="headerlink" title="2.2 顺序结构 【了解】"></a>2.2 顺序结构 【了解】</h3><blockquote><p>顺序结构，指的是js程序默认的执行顺序（自上而下）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">document</span>.write(<span class="number">1</span>);</span><br><span class="line">&gt; <span class="built_in">document</span>.write(<span class="number">2</span>);</span><br><span class="line">&gt; <span class="built_in">document</span>.write(<span class="number">3</span>);</span><br><span class="line">&gt; <span class="built_in">document</span>.write(<span class="number">4</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-3-分支结构-【重要】"><a href="#2-3-分支结构-【重要】" class="headerlink" title="2.3 分支结构 【重要】"></a>2.3 分支结构 【重要】</h3><blockquote><p>分支结构，根据不同的情况，执行不同的代码。</p><ul><li><p>单分支结构</p><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&gt;     <span class="comment">//执行语句</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="comment">//当条件表达式成立时，也就是条件表达式的最终结果是true时，就进入大括号中执行代码。否则，当条件表达式不成立时，也就是条件表达式的最终结果是false时，就不会进入大括号中执行代码。</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="comment">// 需求：接收用户所输入的年龄，若年龄大于等于18，就给用户显示一张图片。</span></span><br><span class="line">&gt;     <span class="keyword">var</span> age = prompt(<span class="string">'请输入你的年龄'</span>);</span><br><span class="line">&gt;     <span class="keyword">if</span>(age&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">&gt;       <span class="built_in">document</span>.write(<span class="string">'&lt;img src="wc.jpg"&gt;'</span>)</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="comment">//调试观察程序的执行流程</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>双分支结构</p><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&gt;       <span class="comment">//条件成立，要执行的代码</span></span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">&gt;       <span class="comment">//条件不成立，要执行的代码</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="comment">//当条件表达式成立时，就执行if中的代码。否则，执行else中的代码。两者必定执行其中一个。</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="comment">// 需求：接收用户所输入的年龄，若年龄大于等于18，就给用户显示一张图片。否则，告诉用户年龄太小，不宜观看。</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="keyword">var</span> age = prompt(<span class="string">'请输入你的年龄'</span>);</span><br><span class="line">&gt;     <span class="keyword">if</span>(age&gt;=<span class="number">18</span>) &#123;</span><br><span class="line">&gt;       docuemnt.write(<span class="string">'&lt;img src="wc.jpg"&gt;'</span>);</span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">&gt;       alert(<span class="string">'年龄太小，不宜观看'</span>);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="comment">//调试观察程序的执行流程</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>多分支结构</p><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&gt;     <span class="comment">// 执行语句</span></span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&gt;     <span class="comment">// 执行语句</span></span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&gt;     <span class="comment">// 执行语句</span></span><br><span class="line">&gt;     &#125;... else &#123;</span><br><span class="line">&gt;       <span class="comment">//执行语句</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="comment">// 从第一个if开始条件表达式判断，若成立则跳过整个多分支语句。若不成立，则开始判断第二个条件表达式判断，依次类推。 若以上if判断都不成立，则最终执行最后一个else中的代码。对于最后的else可有可无（按需使用）</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="comment">// 需求：接收班长口袋里的钱数？若大于等于2000，请大家吃西餐。若小于2000，大于等于1500，请大家吃快餐。若小于1500，大于等于1000，请大家喝饮料。若小于1000，大于等于500，请大家吃棒棒糖。否则提醒班长下次把钱带够</span></span><br><span class="line">&gt;     <span class="keyword">var</span> money = prompt(<span class="string">'班长口袋里的钱'</span>);</span><br><span class="line">&gt;     <span class="keyword">if</span>(money&gt;=<span class="number">2000</span>)&#123;</span><br><span class="line">&gt;       alert(<span class="string">'吃西餐'</span>);</span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money&gt;=<span class="number">1500</span>)&#123;</span><br><span class="line">&gt;       alert(<span class="string">'吃快餐'</span>);</span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money&gt;=<span class="number">1000</span>) &#123;</span><br><span class="line">&gt;       alert(<span class="string">'喝饮料'</span>);</span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money&gt;=<span class="number">500</span>)&#123;</span><br><span class="line">&gt;       alert(<span class="string">'吃棒棒糖'</span>);</span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">&gt;       alert(<span class="string">'班长，下次带够钱'</span>);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="comment">//调试观察程序的执行流程</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>switch结构</p><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">switch</span>(传入的值)&#123;</span><br><span class="line">&gt;       <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">&gt;         <span class="comment">//执行语句</span></span><br><span class="line">&gt;     <span class="keyword">break</span>;</span><br><span class="line">&gt;       <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">&gt;         <span class="comment">//执行语句</span></span><br><span class="line">&gt;     <span class="keyword">break</span>;</span><br><span class="line">&gt;       <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">&gt;         <span class="comment">//执行语句</span></span><br><span class="line">&gt;         <span class="keyword">break</span>;</span><br><span class="line">&gt;       <span class="comment">/*...*/</span></span><br><span class="line">&gt;       <span class="keyword">default</span>:</span><br><span class="line">&gt;         <span class="comment">//执行语句</span></span><br><span class="line">&gt;         <span class="keyword">break</span>;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="comment">//做等值（全等）判断，让传入的值和以下各种值的情况比较，符合执行应的代码。否则依次向下比较。若以上的值都不成立，则执行default(可有可无，按需使用)对应的代码。</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="comment">//break关键字，可有可无，按需使用。当执行了break关键字时，会结束switch结构</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="comment">//需求：接收用户输入的月份，根据月份告诉用户当前的季节3、4、5月为春季，6、7、8月为夏季，9、10、11月为秋季，12、1、2月为冬季。</span></span><br><span class="line">&gt;     <span class="keyword">var</span> month = prompt(<span class="string">'请输入月份'</span>);</span><br><span class="line">&gt;     <span class="keyword">switch</span>(month)&#123;</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">&gt;         alert(<span class="string">'春季'</span>);</span><br><span class="line">&gt;         <span class="keyword">break</span>;</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"6"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"7"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"8"</span>:</span><br><span class="line">&gt;         alert(<span class="string">'夏季'</span>);</span><br><span class="line">&gt;         <span class="keyword">break</span>;</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"9"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"10"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"11"</span>:</span><br><span class="line">&gt;         alert(<span class="string">'秋季'</span>);</span><br><span class="line">&gt;         <span class="keyword">break</span>;</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"12"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">&gt;       <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">&gt;         alert(<span class="string">'冬季'</span>);</span><br><span class="line">&gt;         <span class="keyword">break</span>;</span><br><span class="line">&gt;       <span class="keyword">default</span>:</span><br><span class="line">&gt;         alert(<span class="string">'你输入的月份不合法'</span>);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>switch结构 和 多分支结构的区别</p><ul><li>switch结构仅仅只能做等值判断。</li><li>多分支结构，既可以做等值判断，也可以做其他判断。</li><li>当对于多种情况，全都是等值判断时，可以选择使用switch，因为siwtch对于等值判断结构更加清晰，执行速度要比多分支结构要快一些。</li></ul></li><li><p>三元表达式</p><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;     条件表达式 ? 结果<span class="number">1</span>:结果<span class="number">2</span>;</span><br><span class="line">&gt;     <span class="comment">//当条件成立时，执行结果1，否则执行结果2。 是对if-else双分支语句的简写。 不过建议使用if-else,因为if-else结构更加清晰。</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="comment">// 需求：接收用户所输入的年龄，若年龄大于等于18，就给用户显示一张图片。否则，告诉用户年龄太小，不宜观看。</span></span><br><span class="line">&gt;     <span class="keyword">var</span> age = prompt(<span class="string">'请输入你的年龄'</span>);</span><br><span class="line">&gt;     age&gt;=<span class="number">18</span>?<span class="built_in">document</span>.write(<span class="string">'&lt;img src="wc.jpg"&gt;'</span>):alert(<span class="string">'年龄太小，不宜观看'</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="2-4-循环结构-【重要】"><a href="#2-4-循环结构-【重要】" class="headerlink" title="2.4 循环结构 【重要】"></a>2.4 循环结构 【重要】</h3><ul><li><p>什么是循环？</p><blockquote><p>循环，就是重复的意思。在程序中，通过循环可以重复的执行一段程序。<br>问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 打印&quot;我爱你&quot;一万次到页面中 ？ 怎么做？</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>while 循环</p><blockquote><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">&gt;     <span class="comment">//循环体</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//当条件成立时，会执行循环体中的代码。然后再返回判断条件是否成立，周而复始。直到条件不成立时，结束当前循环</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> count = <span class="number">1</span>; <span class="comment">//初始化变量count为1；</span></span><br><span class="line">&gt;   <span class="keyword">while</span>(count&lt;=<span class="number">10000</span>)&#123;</span><br><span class="line">&gt;     <span class="built_in">document</span>.write(<span class="string">'&lt;h2&gt;我爱你&lt;/h2&gt;'</span>);</span><br><span class="line">&gt;     count++;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//调试观察代码的执行流程</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>图解while循环执行流程<br><img src="/2018/06/10/js基础语法02/media/01.png" alt="循环"></li></ul></blockquote></li><li><p>do-while 循环</p><blockquote><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">do</span> &#123;</span><br><span class="line">&gt;     <span class="comment">//循环体</span></span><br><span class="line">&gt;   &#125;<span class="keyword">while</span>(条件表达式);</span><br><span class="line">&gt;</span><br><span class="line">&gt;   <span class="comment">//先执行一次循环体，然后是否周而复始的执行循环体，根据条件表达式是否成立决定。</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">&gt;   <span class="keyword">do</span> &#123;</span><br><span class="line">&gt;     <span class="built_in">document</span>.write(<span class="string">'&lt;h2&gt;我爱你&lt;/h2&gt;'</span>);</span><br><span class="line">&gt;     count++;</span><br><span class="line">&gt;   &#125;<span class="keyword">while</span>(count&lt;=<span class="number">10000</span>)</span><br><span class="line">&gt;   <span class="comment">//调试观察代码的执行流程</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>图解do-while循环执行流程<br><img src="/2018/06/10/js基础语法02/media/02.png" alt=""></li></ul></blockquote></li><li><p>for 循环 【一般for循环用的比较多】</p><blockquote><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">//每个表达式用分号;分割，千万不要写成逗号,</span></span><br><span class="line">&gt;   <span class="keyword">for</span>(初始化表达式<span class="number">1</span>;条件表达式<span class="number">2</span>;自增表达式<span class="number">3</span>)&#123;</span><br><span class="line">&gt;     <span class="comment">//循环体4</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//执行顺序： 1 2 4 3 → 2 4 3 → 2 4 3 ...</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">for</span>(<span class="keyword">var</span> count = <span class="number">1</span>;count&lt;=<span class="number">10000</span>;count++) &#123;</span><br><span class="line">&gt;     <span class="built_in">document</span>.write(<span class="string">'&lt;h2&gt;我爱你&lt;/h2&gt;'</span>);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">////调试观察代码的执行流程</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>图解for循环执行流程<br><img src="/2018/06/10/js基础语法02/media/01.png" alt=""></p><p><img src="/2018/06/10/js基础语法02/media/03.png" alt=""></p></li></ul></blockquote></li><li><p>break 和 continue</p><blockquote><ul><li><p>break 关键字</p><ul><li><p>作用：可以结束当前整个循环</p></li><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="comment">//需求：接收用户输入的用户名和密码，若用户名为 “admin” ,密码为 “123456” ,提示用户登录成功!  否则，让用户是指输入正确为止！</span></span><br><span class="line">&gt;    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">&gt;      <span class="keyword">var</span> userName = prompt(<span class="string">'请输入用户名'</span>);</span><br><span class="line">&gt;      <span class="keyword">var</span> pwd = prompt(<span class="string">'请输入密码'</span>);</span><br><span class="line">&gt;      <span class="keyword">if</span>(userName==<span class="string">'admin'</span>&amp;&amp;pwd==<span class="string">'123456'</span>)&#123;</span><br><span class="line">&gt;        alert(<span class="string">'登录成功'</span>);</span><br><span class="line">&gt;        <span class="keyword">break</span>;</span><br><span class="line">&gt;      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">&gt;        alert(<span class="string">'用户名或密码错误，请重新输入'</span>);</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>continue关键字</p><ul><li><p>作用：结束当前这一次的循环，并开始下一次循环</p></li><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="comment">//打印 100以内所有的偶数</span></span><br><span class="line">&gt;    <span class="keyword">for</span>(<span class="keyword">var</span> num = <span class="number">1</span>;num&lt;=<span class="number">100</span>;num++)&#123;</span><br><span class="line">&gt;      <span class="keyword">if</span>(num%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">&gt;        <span class="keyword">continue</span>;</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;      <span class="built_in">console</span>.log(num);</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote></li><li><p>三种循环的相同点和不同点</p><blockquote><ul><li>相同点：<ul><li>都是循环</li></ul></li><li>不同点<ul><li>不论条件是否成立，循环体必须执行一次，用do-while循环</li><li>当循环次数不确定时，选用while循环更加简单些</li><li>当循环次数确定时，一般选择使用for循环</li></ul></li></ul></blockquote></li><li><p>死循环</p><blockquote><p>永无休止的循环就是“死循环”，在程序中要避免“死循环”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">while</span>(<span class="number">1</span>==<span class="number">1</span>) &#123;</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(<span class="string">'我爱你'</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript语法基础02&quot;&gt;&lt;a href=&quot;#JavaScript语法基础02&quot; class=&quot;headerlink&quot; title=&quot;JavaScript语法基础02&quot;&gt;&lt;/a&gt;JavaScript语法基础02&lt;/h1&gt;&lt;h2 id=&quot;一-表达式和语句&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS语法基础01</title>
    <link href="http://yoursite.com/2018/05/25/js%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8001/"/>
    <id>http://yoursite.com/2018/05/25/js语法基础01/</id>
    <published>2018-05-25T02:51:25.000Z</published>
    <updated>2018-10-08T07:11:04.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript语法基础-01"><a href="#JavaScript语法基础-01" class="headerlink" title="JavaScript语法基础 01"></a>JavaScript语法基础 01</h1><hr><h2 id="一-JavaScript介绍"><a href="#一-JavaScript介绍" class="headerlink" title="一.  JavaScript介绍"></a>一.  JavaScript介绍</h2><h3 id="1-1-为什么要学习JS"><a href="#1-1-为什么要学习JS" class="headerlink" title="1.1  为什么要学习JS ?"></a>1.1  为什么要学习JS ?</h3><ul><li><p>JavaScript 起初的目的    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaScript起初出现的目的是为了做一些简单的表单验证。</span><br></pre></td></tr></table></figure></li><li><p>JavaScript现在的意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JS现在的应用几乎无处不在。</span><br><span class="line">→ PC Web 页面特效</span><br><span class="line">→ 移动端（web App, 混合 App）</span><br><span class="line">→ AJAX （异步和服务器交互）</span><br><span class="line">→ 后端开发 （NodeJS）</span><br><span class="line">→ 游戏、vr、智能家电、AI</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>演示</p><ul><li><p>效果：<br> <a href="http://www.webhek.com/post/unitethelovers.html" target="_blank" rel="noopener">内衣公司广告</a><br> <a href="http://www.webhek.com/post/3d-album.html" target="_blank" rel="noopener">程序员给女朋友制定的相册</a><br> <a href="http://www.webhek.com/apps/species-in-pieces/#" target="_blank" rel="noopener">频危动物的申诉</a><br>   …</p></li><li><p>游戏：<br><a href="http://www.html5tricks.com/demo/html5-fruit-ninja/index.html" target="_blank" rel="noopener">水果忍者</a><br><a href="http://www.html5tricks.com/demo/html5-fly/play.html" target="_blank" rel="noopener">飞机大战</a></p><p><a href="http://www.codecombat.cn/" target="_blank" rel="noopener">游戏编程</a><br>…</p></li><li><p>应用</p><p><a href="http://naotu.baidu.com/home" target="_blank" rel="noopener">百度脑图</a><br>QQ邮箱<br>网页版微信<br>网页版QQ</p><p>…</p></li></ul></li></ul><h3 id="1-2-JS是一门编程语言"><a href="#1-2-JS是一门编程语言" class="headerlink" title="1.2  JS是一门编程语言"></a>1.2  JS是一门编程语言</h3><ul><li><p>编程语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">→ 具有逻辑描述能力的语言就是编程语言。逻辑指的是数学逻辑和业务逻辑。</span><br><span class="line">→ HTML和CSS不是编程语言，因为它们不具有逻辑描述能力。</span><br><span class="line">→ JavaScript是一门解释型的、弱类型的、基于原型的编程语言。</span><br></pre></td></tr></table></figure></li><li><p>解释型和@编译型编程语言【扩展】</p><ul><li><p>源代码和二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们所写的源代码是我们人类能够看的懂的，但计算机看不懂，计算机只认识二进制0和1。若想要让计算机能够识别我们所写的源代码，需要一个翻译官把我们的源代码翻译成二进制再交给计算机执行。</span><br></pre></td></tr></table></figure></li><li><p>解释型编程语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">特点：翻译一句，执行一句。</span><br><span class="line"></span><br><span class="line">常见的解释型的编程语言有：PHP、JavaScript等。</span><br><span class="line"></span><br><span class="line">优点：开发效率高。</span><br><span class="line"></span><br><span class="line">缺点：程序性能相对低一些。适合用来开发一些应用级别的软件。</span><br></pre></td></tr></table></figure><p><img src="/2018/05/25/js语法基础01/media/01jsx.png" alt=""></p></li><li><p>编译型编程语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">特点：全部翻译好，再执行。</span><br><span class="line"></span><br><span class="line"> 常见的编译型编程语言有：c、c++等。</span><br><span class="line"></span><br><span class="line"> 优点：程序性能较高。适合开发一些系统级别的软件。</span><br><span class="line"></span><br><span class="line"> 缺点：开发效率低。</span><br></pre></td></tr></table></figure><p><img src="/2018/05/25/js语法基础01/media/02byx.png" alt=""></p></li></ul></li></ul><ul><li><p>弱类型与强类型编程语言</p><ul><li><p>弱类型编程语言</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">特点： 弱类型编程语言在用变量引用数据时，变量所代表的数据的类型在执行时由由值来决定。</span><br><span class="line"></span><br><span class="line">常见的编程语言：PHP、JavaScript等</span><br><span class="line"></span><br><span class="line">JS代码示例：</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;     <span class="comment">//变量a代表的数据类型是数字。</span></span><br><span class="line">a = <span class="string">'小明'</span>;    <span class="comment">//变量a代表的数据类型是字符串。</span></span><br><span class="line"></span><br><span class="line">优点：弱类型编程语言比较灵活。</span><br></pre></td></tr></table></figure></li><li><p>强类型编程语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">特点：强类型编程语言在用变量引用数据时，该变量必须得先声明要引用的数据的数据类型。在使用时该变量只能引用指定类型的数据。否则会报错。也就是说变量所代表的数据的数据类型在代码定义时决定的。</span><br><span class="line"></span><br><span class="line">常见的编程语言：Java、C#、C等</span><br><span class="line"></span><br><span class="line">c#代码示例：</span><br><span class="line">int a = 123;//变量a代码的数据是整数类型的数字。</span><br><span class="line">a = &apos;小明&apos;;  // 会报错。</span><br><span class="line"></span><br><span class="line">优点：稳定。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-3-JS历史"><a href="#1-3-JS历史" class="headerlink" title="1.3  JS历史"></a>1.3  JS历史</h3><ul><li><p>JavaScript 问世</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上世纪90年代，NetScape(网景)公司研发的NetScape Navigator1.0(浏览器)成为当时最热门的浏览器。市场份额一举超过90%。</span><br></pre></td></tr></table></figure><p><img src="/2018/05/25/js语法基础01/media/03llq.png" alt="浏览器"><br>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Netscape公司很快发现，Navigator浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。比如，如果用户忘记填写“用户名”，就点了“发送”按钮，到服务器再发现这一点就有点太晚了，最好能在用户发出数据之前，就告诉用户“请填写用户名”。这就需要在网页中嵌入小程序，让浏览器检查每一栏是否都填写了。</span><br><span class="line">1995年，Netscape公司雇佣了程序员Brendan Eich（布兰登·艾奇）开发这种网页脚本语言，JavaScript1.0。</span><br><span class="line">1996年3月，Navigator 2.0浏览器正式内置了JavaScript脚本语言。</span><br></pre></td></tr></table></figure></li><li><p>“邪恶的” 后来者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为 JavaScript1.0 如此成功，所以微软也决定进军浏览器，1996年8月，微软模仿JavaScript开发了一种相近的语言，取名为JScript（JavaScript是Netscape的注册商标，微软不能用），首先内置于IE 3.0。Netscape公司面临丧失浏览器脚本语言的主导权的局面。</span><br></pre></td></tr></table></figure></li><li><p>标准的重要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在微软进入后，有 3 种不同的 JavaScript 版本同时存在：NetscapeNavigator 3.0 中的 JavaScript、IE 中的 JScript 以及 CEnvi 中的 ScriptEase。与 C 和其他编程语言不同的是， JavaScript 并没有一个标准来统一其语法或特性，而这 3 种不同的版本恰恰突出了这个问题。 随着业界担心的增加，这个语言标准化显然已经势在必行。</span><br></pre></td></tr></table></figure></li><li><p>JavaScript标准化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1996年11月，Netscape公司决定将JavaScript提交给国际标准化组织ECMA（European Computer Manufacturers Association欧洲计算机制造商协会），希望JavaScript能够成为国际标准，以此抵抗微软。1997年7月，ECMA组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为ECMAScript。这个版本就是ECMAScript 1.0版。</span><br><span class="line"></span><br><span class="line">注：ECMAScript 仅仅只是语法</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-4-JS组成部分"><a href="#1-4-JS组成部分" class="headerlink" title="1.4  JS组成部分"></a>1.4  JS组成部分</h3><p><img src="/2018/05/25/js语法基础01/media/05js.png" alt="Js组成部分"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> → ECMAScript  标准语法。</span><br><span class="line"> </span><br><span class="line"> → DOM（Document Object Model）文档对象模型。</span><br><span class="line">  提供了操作网页中的html和css的工具（API）。将来可以通过js语法调用。</span><br><span class="line">  </span><br><span class="line"> → BOM（Browser Object Model）浏览器对象模型。</span><br><span class="line"> 提供了操作浏览器的工具（API）。将来可以通过js语法调用。</span><br><span class="line"> </span><br><span class="line">备注：API全称 Application Programming Interface 应用程序编程接口</span><br></pre></td></tr></table></figure><h2 id="二-JS的书写方式"><a href="#二-JS的书写方式" class="headerlink" title="二.  JS的书写方式"></a>二.  JS的书写方式</h2><h3 id="2-1-行内JS"><a href="#2-1-行内JS" class="headerlink" title="2.1  行内JS"></a>2.1  行内JS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    行内js，写在标签中，一般配合事件使用。在实际开发中不推荐使用。</span></span><br><span class="line"><span class="comment">    事件，和网页交互的行为。 如：鼠标点击、鼠标移动、鼠标离开、键盘按下等。</span></span><br><span class="line"><span class="comment">    鼠标点击按钮时，弹出数字1。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert(1)"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-内部JS"><a href="#2-2-内部JS" class="headerlink" title="2.2  内部JS"></a>2.2  内部JS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    ① 内部js，在head标签或body标签中使用script标签。</span></span><br><span class="line"><span class="comment">    ② 标签：</span></span><br><span class="line"><span class="comment">        &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="comment">            js代码</span></span><br><span class="line"><span class="comment">        &lt;/script&gt;</span></span><br><span class="line"><span class="comment">标签的type属性目的告诉浏览器，该标签中是js代码。type属性在html5版本中可以省略。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ③ 优点：减少和html代码的耦合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    alert(<span class="number">1</span>);  <span class="comment">//弹出数字1</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在body标签中使用script标签--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    alert(<span class="number">2</span>);  <span class="comment">//弹出数字2</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-外联JS"><a href="#2-3-外联JS" class="headerlink" title="2.3 外联JS"></a>2.3 外联JS</h3><ul><li><p>html文件代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    ① 外联js,在head标签或body标签中使用script标签。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ② 标签：</span></span><br><span class="line"><span class="comment">        &lt;script src='js文件路径'&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ③ 优点：彻底和html分离，便于后期代码的维护。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"base.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JS文件（base.js）代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="三-JS输出内容方式-和-注释"><a href="#三-JS输出内容方式-和-注释" class="headerlink" title="三.  JS输出内容方式 和 注释"></a>三.  JS输出内容方式 和 注释</h2><h3 id="3-1-JS输出内容的方式"><a href="#3-1-JS输出内容的方式" class="headerlink" title="3.1   JS输出内容的方式"></a>3.1   JS输出内容的方式</h3><ul><li><p>方式一：警告框弹出, alert(‘内容’);</p><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出数字1</span></span><br><span class="line">alert(<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure></li><li><p>效果图</p></li></ul><p><img src="/2018/05/25/js语法基础01/media/06jgk.png" alt="警告框"></p></li></ul><ul><li><p>方式二：控制台打印, console.log(‘内容’);</p><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制台打印 '你好'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'你好'</span>);</span><br></pre></td></tr></table></figure></li><li><p>效果图</p></li></ul><p><img src="/2018/05/25/js语法基础01/media/07kzt.png" alt="控制台"></p></li></ul><ul><li><p>方式三：网页中打印，document.write(‘内容’);</p><ul><li><p>代码 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//网页中打印  '你好'。</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'你好'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//网页中也可以打印带有标签的内容。</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;你好&lt;/h1&gt;'</span>);</span><br></pre></td></tr></table></figure></li><li><ul><li>效果图<br><img src="/2018/05/25/js语法基础01/media/08wyz.png" alt="网页中"></li></ul></li></ul></li></ul><ul><li><p>方式四： 输出提示信息，接收用户输入的内容。 prompt(‘提示信息’);</p><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提示并接收用户所输入信息</span></span><br><span class="line">prompt(<span class="string">'请输入您的年龄'</span>);</span><br></pre></td></tr></table></figure></li><li><ul><li>效果图<br><img src="/2018/05/25/js语法基础01/media/09yhsr.png" alt="提示并接收用户输入的内容"></li></ul></li></ul></li></ul><h3 id="3-2-JS注释"><a href="#3-2-JS注释" class="headerlink" title="3.2   JS注释"></a>3.2   JS注释</h3><ul><li><p>单行注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释。 控制台打印</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'你好'</span>);</span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释。</span></span><br><span class="line"><span class="comment">控制台打印。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'你好'</span>);</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="四-代码规范"><a href="#四-代码规范" class="headerlink" title="四.  代码规范"></a>四.  代码规范</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">① 代码要缩进，建议缩进2个空格。</span><br><span class="line">② 一般情况下，每条语句后要加分号。</span><br><span class="line">③ 一般情况下，每条语句要独占一行。</span><br></pre></td></tr></table></figure><h2 id="五-JS代码执行顺序-和-调试"><a href="#五-JS代码执行顺序-和-调试" class="headerlink" title="五.  JS代码执行顺序 和 调试"></a>五.  JS代码执行顺序 和 调试</h2><h3 id="5-1-JS代码执行顺序"><a href="#5-1-JS代码执行顺序" class="headerlink" title="5.1  JS代码执行顺序"></a>5.1  JS代码执行顺序</h3><ul><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS代码默认的执行顺序是自上而下执行的。</span></span><br><span class="line"><span class="comment">//代码：</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'1'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'2'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'3'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'4'</span>);</span><br></pre></td></tr></table></figure></li><li><p>效果图<br><img src="/2018/05/25/js语法基础01/media/10zxsx.png" alt="js代码执行顺序"></p></li></ul><h3 id="5-2-调试-【重要】"><a href="#5-2-调试-【重要】" class="headerlink" title="5.2 调试  【重要】"></a>5.2 调试  【重要】</h3><ul><li><p>为什么需要调试？</p><blockquote><p>​    在开发开发工程中，难免会遇到bug。bug无非两种，一种是语法报错，语法错误时浏览器会告诉我们在什么地方报的错；另一种是逻辑错误，逻辑错误不同于语法报错，逻辑错误浏览器无法告诉我们在什么地方逻辑错误。需要我们手动的去调试发现问题。<br>​    所以调试可以帮助我们去解决问题。</p></blockquote></li></ul><ul><li><p>调试的步骤</p><ul><li>步骤一：在谷歌浏览器中鼠标右键，选择检查，打开开发者面板，选中soruces项，打开并显示我们的源代码。<br><img src="/2018/05/25/js语法基础01/media/11ts.png" alt=""></li></ul></li></ul><ul><li><ul><li>步骤二：在指定js代码处对应的行号单击设置断点。<br><img src="/2018/05/25/js语法基础01/media/12dd.png" alt="调试"></li></ul><p>​</p></li><li><ul><li>步骤三：刷新点击下一步手动控制代码的执行过程。<br><img src="/2018/05/25/js语法基础01/media/13ts.png" alt="调试"></li></ul></li></ul><h2 id="六-计算机的组成部分"><a href="#六-计算机的组成部分" class="headerlink" title="六.  计算机的组成部分"></a>六.  计算机的组成部分</h2><h3 id="6-1-软件-【了解】"><a href="#6-1-软件-【了解】" class="headerlink" title="6.1  软件 【了解】"></a>6.1  软件 【了解】</h3><ul><li><p>应用软件</p><ul><li><p>QQ</p></li><li><p>浏览器</p></li><li><p>Word</p></li><li><p>sublime、webstrom</p></li></ul></li><li><p>系统软件</p><ul><li>Windows 系统</li><li>Linux 系统</li><li>Mac OSX 系统</li></ul></li></ul><h3 id="6-2-硬件-【了解】"><a href="#6-2-硬件-【了解】" class="headerlink" title="6.2  硬件  【了解】"></a>6.2  硬件  【了解】</h3><ul><li><p>三大件</p><ul><li><p>CPU</p><blockquote><p>用来做运算处理，比如程序中的加减乘除等运算。</p><p><img src="/2018/05/25/js语法基础01/media/14cpu.png" alt="cpu"></p></blockquote></li><li><p>内存</p><blockquote><p>运行中的程序中的数据会临时存放到内存中。<br>特点：临时存储数据。当计算机关机再开机时，内存中数据就不存在了。</p><p><img src="/2018/05/25/js语法基础01/media/15nc.png" alt="内存"></p></blockquote></li><li><p>硬盘</p><blockquote><p>计算机上所有的内容都会存放到硬盘中。<br>特点：永久性存储数据。 当计算机关机再开机时，硬盘中内容依然存在</p><p><img src="/2018/05/25/js语法基础01/media/16yp.png" alt="硬盘"></p></blockquote></li></ul></li></ul><ul><li>输入设备<ul><li>鼠标</li><li>键盘</li><li>手写板</li><li>摄像头</li><li>…</li></ul></li></ul><ul><li>输出设备<ul><li>显示器</li><li>打印机</li><li>投影仪</li><li>…</li></ul></li></ul><h3 id="6-3-软硬件关系图-【了解】"><a href="#6-3-软硬件关系图-【了解】" class="headerlink" title="6.3  软硬件关系图  【了解】"></a>6.3  软硬件关系图  【了解】</h3><p><img src="/2018/05/25/js语法基础01/media/17.png" alt=""></p><p><img src="/2018/05/25/js语法基础01/media/18.png" alt=""></p><h2 id="七-变量"><a href="#七-变量" class="headerlink" title="七.  变量"></a>七.  变量</h2><h3 id="7-1-认识数据"><a href="#7-1-认识数据" class="headerlink" title="7.1  认识数据"></a>7.1  认识数据</h3><ul><li><p>数据</p><blockquote><p>JavaScript之所以称为编程语言，是因为JavaScript具有逻辑描述能力。而逻辑描述中更多的是运算。运算操作的就是数据。</p><p>什么是数据呢？</p><ul><li>从输出角度，能够被输出的内容就是数据。</li><li>从数据类型角度，数据一定是有类型的。</li></ul></blockquote></li><li><p>初步认识数字和字符串</p><ul><li><p>Number 数字类型</p><blockquote><p>就是阿拉伯数字，正数、负数、0 都是数字。<br>如：1; 2; -100; 0; 3.14 </p></blockquote></li><li><p>String 字符串类型</p><blockquote><p>用单引号或双引号所包裹的字符就是字符串。<br>如：‘张三’; ‘abc’;  “你好”;</p></blockquote></li></ul></li></ul><ul><li><p>程序在运行时，数据会临时存放到内存中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /*</span></span><br><span class="line"><span class="undefined">  程序在运行时，程序中的数据会被临时分配到内存中。每个数据在内存中都会占据一定的空间大小。</span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="undefined">1;</span></span><br><span class="line"><span class="undefined">3.14;</span></span><br><span class="line"><span class="javascript"><span class="string">'张三'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="string">'李四'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/05/25/js语法基础01/media/19nc.png" alt="内存"></p></li></ul><h3 id="7-2-字面量"><a href="#7-2-字面量" class="headerlink" title="7.2 字面量"></a>7.2 字面量</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="undefined">什么是字面量？</span></span><br><span class="line"><span class="undefined">字面量，也被称为直接量。简单来说就是能够直接使用的数据就是字面量。</span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="javascript"><span class="number">1</span>; <span class="comment">//数字字面量</span></span></span><br><span class="line"><span class="javascript">  <span class="string">'你好'</span>;  <span class="comment">//字符串字面量</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-为什么需要变量"><a href="#7-3-为什么需要变量" class="headerlink" title="7.3  为什么需要变量"></a>7.3  为什么需要变量</h3><ul><li><p>问题</p><blockquote><p>用js程序描述100次 1+1 运算，并在控制台输出。</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">&gt; <span class="built_in">document</span>.write(<span class="number">1</span>+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">&gt; <span class="built_in">document</span>.write(<span class="number">1</span>+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">&gt; <span class="built_in">document</span>.write(<span class="number">1</span>+<span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">&gt; ...</span></span><br><span class="line"><span class="undefined">&gt; </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>内存分配图<br><img src="/2018/05/25/js语法基础01/media/20nc.png" alt=""></li><li>缺点：<br>​     既然运算的数据都是1，为什么不在内存中只存放一个数字1，然后重复使用那一个数字1呢？每一次运算都在内存中开辟新的空间存放新的1，造成了内存使用的浪费。</li></ul></blockquote></li></ul><h3 id="7-4-变量的创建和使用"><a href="#7-4-变量的创建和使用" class="headerlink" title="7.4  变量的创建和使用"></a>7.4  变量的创建和使用</h3><ul><li><p>什么是变量？</p><blockquote><p>变量就是能够关联到内存中数据的标识符。用来获取和修改内存中数据。</p></blockquote></li><li><p>变量的创建和使用</p><blockquote><ul><li><p>创建变量，关键字 var </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">&gt;   <span class="comment">//创建一个变量</span></span></span><br><span class="line"><span class="javascript">&gt;     <span class="keyword">var</span> age;</span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>变量的赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">&gt;   <span class="comment">//创建一个变量</span></span></span><br><span class="line"><span class="javascript">&gt;     <span class="keyword">var</span> age;</span></span><br><span class="line"><span class="javascript">&gt;   <span class="comment">//给变量赋值</span></span></span><br><span class="line"><span class="undefined">&gt;     age = 123;</span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>变量初始化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">&gt;   <span class="comment">//创建一个变量并赋值</span></span></span><br><span class="line"><span class="javascript">&gt;     <span class="keyword">var</span> age = <span class="number">123</span>；</span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>变量的批量创建 和 批量赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">&gt;   <span class="keyword">var</span> age,name,sex;</span></span><br><span class="line"><span class="javascript">&gt;     age = <span class="number">17</span>,name = <span class="string">'张三'</span>,sex = <span class="string">'男'</span>;</span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>变量的批量初始化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">&gt;   <span class="keyword">var</span> age = <span class="number">17</span>,name = <span class="string">'张三'</span>, sex = <span class="string">'男'</span>;</span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>变量的重复赋值（喜新厌旧）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;     /*</span></span><br><span class="line"><span class="undefined">&gt;     一个变量可以重复赋值。变量最终的结果是最后一次的赋值。</span></span><br><span class="line"><span class="undefined">&gt;     */</span></span><br><span class="line"><span class="javascript">&gt;   <span class="keyword">var</span> age = <span class="number">123</span>;</span></span><br><span class="line"><span class="javascript">&gt;     <span class="built_in">console</span>.log(age); <span class="comment">//123;</span></span></span><br><span class="line"><span class="undefined">&gt;     age = 456;</span></span><br><span class="line"><span class="javascript">&gt;     <span class="built_in">console</span>.log(age); <span class="comment">//456;</span></span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>一个变量可以赋值给另一个变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">&gt;   <span class="keyword">var</span> a = <span class="number">123</span>;</span></span><br><span class="line"><span class="javascript">&gt;     <span class="keyword">var</span> b = a;</span></span><br><span class="line"><span class="javascript">&gt;     <span class="built_in">console</span>.log(b); <span class="comment">//123;</span></span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>变量的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;     /*</span></span><br><span class="line"><span class="undefined">&gt;     使用变量就直接调用变量的名字</span></span><br><span class="line"><span class="undefined">&gt;     */</span></span><br><span class="line"><span class="javascript">&gt;   <span class="keyword">var</span> age = <span class="number">17</span>;</span></span><br><span class="line"><span class="javascript">&gt;     alert(age);  <span class="comment">//把变量age所代表的数据输出</span></span></span><br><span class="line"><span class="undefined">&gt;   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="7-5-图解变量和内存中数据的关系-【重要】"><a href="#7-5-图解变量和内存中数据的关系-【重要】" class="headerlink" title="7.5  图解变量和内存中数据的关系  【重要】"></a>7.5  图解变量和内存中数据的关系  【重要】</h3><p><img src="/2018/05/25/js语法基础01/media/21.png" alt=""></p><h3 id="7-6-变量的命名规范-和-规则-【重要】"><a href="#7-6-变量的命名规范-和-规则-【重要】" class="headerlink" title="7.6 变量的命名规范 和 规则 【重要】"></a>7.6 变量的命名规范 和 规则 【重要】</h3><ul><li><p>规则（法律）</p><ul><li>变量名可以由数字、字母、下划线_、$符组成，但不能以数字开头。</li><li>不能使用关键字或保留字当做变量名。</li><li>变量名区分大小写。</li></ul></li><li><p>规范（道德）</p><ul><li><p>驼峰命名法，变量名若由多个单词组成，第一个单词的首字母要小写，后面其他单词的首字母要大写。<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">'admin'</span>;</span><br></pre></td></tr></table></figure></li><li><p>定义的变量名要顾名思义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个变量age代表年龄</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="7-7-关键字和保留字-【了解】"><a href="#7-7-关键字和保留字-【了解】" class="headerlink" title="7.7 关键字和保留字 【了解】"></a>7.7 关键字和保留字 【了解】</h3><ul><li><p>关键字</p><blockquote><p>具有特殊含义的字符</p><p><img src="/2018/05/25/js语法基础01/media/22.png" alt="关键字"></p></blockquote></li><li><p>保留字</p><blockquote><p>ECMAScript 后期发展可<code></code>能会用到的新的字符ES3.0 ES5.0  ES6.0</p><p><img src="/2018/05/25/js语法基础01/media/23.png" alt="保留字"></p></blockquote></li></ul><h2 id="八-数据类型"><a href="#八-数据类型" class="headerlink" title="八.  数据类型"></a>八.  数据类型</h2><h3 id="8-1-数据类型介绍-【重要】"><a href="#8-1-数据类型介绍-【重要】" class="headerlink" title="8.1  数据类型介绍 【重要】"></a>8.1  数据类型介绍 【重要】</h3><ul><li><p>基本数据类型</p><blockquote><p>基本数据类型，是指简单的数据类型。有五种，分别是：</p><ul><li>数字    → Number</li><li>字符串    → String</li><li>布尔        → Boolean</li><li>未定义    → Undefined</li><li>空            → Null</li></ul></blockquote></li><li><p>引用数据类型</p><blockquote><p>引用数据类型，是指复杂的数据类型。有很多种，比如：</p><ul><li>数组     → Array</li><li>日期     → Date</li><li>对象     → Object</li><li>…</li></ul></blockquote></li></ul><h3 id="8-2-Number-数字类型-【重要】"><a href="#8-2-Number-数字类型-【重要】" class="headerlink" title="8.2  Number 数字类型 【重要】"></a>8.2  Number 数字类型 【重要】</h3><ul><li><p>数字字面量</p><blockquote><p>就是直接的数字。<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>;</span><br><span class="line">&gt; <span class="number">10</span>;</span><br><span class="line">&gt; <span class="number">3.14</span>;</span><br><span class="line">&gt; <span class="number">-1</span>;</span><br><span class="line">&gt; <span class="number">0</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>进制</p><ul><li><p>十进制 【常用】</p><blockquote><ul><li>序列范围      0-9</li><li>十进制数字： 0;1;2;3;4;5;6;7;8;9;10;11;12;13;100;200;-100等</li></ul></blockquote></li><li><p>八进制 【了解】</p><blockquote><ul><li><p>序列范围     0-7</p></li><li><p>八进制数字：</p><blockquote><p>八进制数字表示必须以0为前缀表示<br>如：01; 02; 03; 04; 05; 06; 07; 等</p></blockquote></li><li><p>注意：在参与运算或使用时，八进制会自动转成十进制来运算。</p></li></ul></blockquote></li><li><p>十六进制 【了解】</p><blockquote><ul><li><p>序列范围：0-9及a-f</p></li><li><p>十六进制数字:</p><blockquote><p>十六进制数字表示必须以0x为前缀表示</p><p>如：0x0; 0x1; 0x2; 0x3 0x4; 0x5; 0xa;等</p></blockquote></li><li><p>注意：在参与运算或使用时，十六进制会自动转成十进制来运算。</p></li></ul></blockquote></li></ul></li></ul><ul><li><p>浮点数（小数）</p><ul><li><p>浮点数就是小数。 如：3.14;  -2.2等;</p></li><li><p>浮点数的精度</p><blockquote><ul><li><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数<br>,浮点数在运算的时候会出现精度丢失的问题，因此在做比较运算的时候，尽量不要用小数进行比较。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="number">0.3</span> - <span class="number">0.1</span> = ?; </span><br><span class="line">&gt;   <span class="number">0.1</span> + <span class="number">0.2</span> = ?;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul></li><li><p>数值范围(了解)</p><blockquote><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。JavaScript不能表示世界上所有的数，因此在JavaScript中，数值大小是有一定限制的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   最小值：Number.MIN_VALUE，这个值为： 5e-324；（科学计数法：5乘以10的负的324次方）</span><br><span class="line">&gt;   最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</span><br><span class="line">&gt;   无穷大：Infinity   （正数数字和0相除的结果）</span><br><span class="line">&gt;   无穷小：-Infinity  （负数数字和0相除的结果）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>NaN</p><blockquote><p>NaN 表示Not a Number，不是一个数字。但却是Number类型。</p><ul><li><p>isNaN(数据);</p><blockquote><p>检测一个数据是否是NaN；是返回true，不是返回false;</p></blockquote></li></ul><p>​</p></blockquote></li></ul><h3 id="8-3-String-字符串类型-【重要】"><a href="#8-3-String-字符串类型-【重要】" class="headerlink" title="8.3  String 字符串类型 【重要】"></a>8.3  String 字符串类型 【重要】</h3><ul><li><p>什么是字符串？</p><blockquote><p>用单引号或者双引号所包裹的字符就是字符串。<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">"张三"</span>;</span><br><span class="line">&gt; <span class="string">'李四'</span>;</span><br><span class="line">&gt; <span class="string">'他大舅他二舅都是他舅'</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>单双引号嵌套</p><blockquote><ul><li><p>思考？</p><blockquote><p>如何打印以下字符串？</p><p>​    我是一个”正直”的人<br>​    我很喜欢”黑马’程序猿’</p></blockquote><p>​</p></li><li><p>单双引号嵌套</p><blockquote><p>如：单引号嵌套双引号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt; <span class="comment">//此时被嵌套的双引号就是字符串中的普通字符</span></span><br><span class="line">&gt;  &gt; <span class="string">'程序"猿"'</span>;</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><blockquote><p>​</p><p>如：双引号嵌套单引号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt; <span class="comment">//此时被嵌套的单引号就是字符串中的普通字符</span></span><br><span class="line">&gt;  &gt; <span class="string">"程序'媛'"</span>;</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></li><li><p>转义符</p><blockquote><ul><li><p>思考</p><blockquote><p>如何打印以下字符串？<br>​    我很喜欢”传’智’播客”</p></blockquote></li><li><p>转义符</p><blockquote><p><img src="/2018/05/25/js语法基础01/media/24.png" alt=""></p></blockquote></li></ul></blockquote></li></ul><ul><li><p>字符串拼接</p><blockquote><p>将两个字符串拼接在一起<br>如：“我爱你”  和   “祖国” 拼接成 “我爱你祖国”</p><ul><li><p>拼接符（连接符） + </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="built_in">console</span>.log(<span class="string">'我爱你'</span> + <span class="string">'祖国'</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="8-4-Boolean-布尔类型-【重要】"><a href="#8-4-Boolean-布尔类型-【重要】" class="headerlink" title="8.4  Boolean 布尔类型 【重要】"></a>8.4  Boolean 布尔类型 【重要】</h3><ul><li><p>仅有两个值，表示程序中的肯定和否定</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">true</span>; <span class="comment">//表示程序中的肯定</span></span><br><span class="line">&gt; <span class="literal">false</span>; <span class="comment">//表示程序中的否定</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>什么情况产生或使用布尔值?</p><blockquote><p>在比较判断或逻辑判断中可以选择使用布尔值。</p></blockquote></li></ul><h3 id="8-5-Undefined和Null类型【重要】"><a href="#8-5-Undefined和Null类型【重要】" class="headerlink" title="8.5  Undefined和Null类型【重要】"></a>8.5  Undefined和Null类型【重要】</h3><ul><li><p>Undefined</p><blockquote><ul><li><p>仅有一个值：undefined,表示未定义;</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="comment">//当创建好一个变量没有赋值时，变量的默认值是undefined;</span></span><br><span class="line">&gt;   &gt; <span class="keyword">var</span> num;</span><br><span class="line">&gt;   &gt; <span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote></li><li><p>Null</p><blockquote><ul><li><p>仅有一个值：null，表示空;</p></li><li><p>GC，垃圾回收机制（Garbage Collection）</p><blockquote><p>​    数据在内存中占据空间，但是对于没有用的数据（不在被使用的数据，不在被变量关联的数据），GC会不断的去检测，若发现没有用的数据则会把没有用的数据从内存中消除。节省空间。</p><p>​    但有时我们需要手动的将数据从内存中释放，怎样释放？手动将变量的值改为null</p></blockquote></li></ul></blockquote></li></ul><h3 id="8-6-检测数据的数据类型【重要】"><a href="#8-6-检测数据的数据类型【重要】" class="headerlink" title="8.6 检测数据的数据类型【重要】"></a>8.6 检测数据的数据类型【重要】</h3><blockquote><ul><li><p>typeof(数据);  </p><blockquote><p>返回数据的数据类型<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">typeof</span>(<span class="string">'abc'</span>);  <span class="comment">//string</span></span><br><span class="line">&gt;   &gt; <span class="keyword">typeof</span>(<span class="literal">true</span>);   <span class="comment">//boolean</span></span><br><span class="line">&gt;   &gt; <span class="keyword">typeof</span>(<span class="number">1123</span>);   <span class="comment">//number</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h2 id="九-运算符"><a href="#九-运算符" class="headerlink" title="九.  运算符"></a>九.  运算符</h2><h3 id="9-1-算术运算符-【重要】"><a href="#9-1-算术运算符-【重要】" class="headerlink" title="9.1  算术运算符 【重要】"></a>9.1  算术运算符 【重要】</h3><blockquote><ul><li>加 +</li><li>减 -</li><li>乘 *</li><li>除 /</li><li>取余数  %</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> result1 = <span class="number">1</span> + <span class="number">2</span>; </span><br><span class="line">&gt; <span class="built_in">console</span>.log(result1); <span class="comment">//3</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> result2 = <span class="number">4</span> - <span class="number">2</span>; </span><br><span class="line">&gt; <span class="built_in">console</span>.log(result2); <span class="comment">//1</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> result3 = <span class="number">2</span> * <span class="number">2</span>; </span><br><span class="line">&gt; <span class="built_in">console</span>.log(result3); <span class="comment">//4</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> result4 = <span class="number">10</span> / <span class="number">5</span>; </span><br><span class="line">&gt; <span class="built_in">console</span>.log(result4); <span class="comment">//2</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">var</span> result5 = <span class="number">3</span> % <span class="number">2</span>; </span><br><span class="line">&gt; <span class="built_in">console</span>.log(result5); <span class="comment">//1</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="9-2-赋值运算符-【重要】"><a href="#9-2-赋值运算符-【重要】" class="headerlink" title="9.2  赋值运算符 【重要】"></a>9.2  赋值运算符 【重要】</h3><blockquote><ul><li><p>赋值 =</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">var</span> age = <span class="number">18</span>;  <span class="comment">//把数据18赋值给变量age</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li><p>复合赋值  +=、-=、*=、/=、%=</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="comment">//针对的是变量</span></span><br><span class="line">&gt;   &gt; <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt; num+=<span class="number">2</span>; <span class="comment">//num = num + 2;</span></span><br><span class="line">&gt;   &gt; <span class="built_in">console</span>.log(num); <span class="comment">//12</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h3 id="9-3-关系运算符-【重要】"><a href="#9-3-关系运算符-【重要】" class="headerlink" title="9.3  关系运算符 【重要】"></a>9.3  关系运算符 【重要】</h3><blockquote><p>关系运算符也就是比较运算符,比较的结果始终都是布尔值</p><ul><li><p>运算符</p><blockquote><ul><li><p>大于    &gt;</p></li><li><p>小于        &lt; </p></li><li><p>大于等于 &gt;=</p></li><li><p>小于等于 &lt;=</p></li><li><p>等于         ==</p></li><li><p>不等于     !=</p></li><li><p>全等        ===</p></li><li><p>不全等    !==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   <span class="built_in">console</span>.log(<span class="number">1</span>&gt;<span class="number">2</span>); <span class="comment">//false</span></span><br><span class="line">&gt;   &gt;   <span class="built_in">console</span>.log(<span class="number">3</span>&gt;=<span class="number">1</span>);  <span class="comment">//true</span></span><br><span class="line">&gt;   &gt;   <span class="built_in">console</span>.log(<span class="number">1</span>==<span class="number">1</span>);  <span class="comment">//true</span></span><br><span class="line">&gt;   &gt;   <span class="built_in">console</span>.log(<span class="number">1</span>!=<span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li><p>== 和 ===的区别</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="comment">// == 比较的是值</span></span><br><span class="line">&gt;   &gt; <span class="built_in">console</span>.log(<span class="number">1</span>==<span class="string">'1'</span>);  <span class="comment">//true;</span></span><br><span class="line">&gt;   &gt; <span class="comment">// === 不仅比较值，还有比较数据类型</span></span><br><span class="line">&gt;   &gt; <span class="built_in">console</span>.log(<span class="number">1</span>===<span class="string">'1'</span>);  <span class="comment">// false;</span></span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h3 id="9-4-逻辑运算符-【重要】"><a href="#9-4-逻辑运算符-【重要】" class="headerlink" title="9.4  逻辑运算符 【重要】"></a>9.4  逻辑运算符 【重要】</h3><blockquote><ul><li><p>且  &amp;&amp;</p><blockquote><p>表示并且，组合两个条件</p><ul><li><p>语法格式： 条件1 &amp;&amp; 条件2</p><blockquote><p>如果 &amp;&amp; 两边的条件结果都是true，结果就是true。其他情况都是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   &gt; <span class="built_in">console</span>.log(<span class="number">1</span>==<span class="number">1</span> &amp;&amp; <span class="number">2</span>==<span class="number">2</span>);  <span class="comment">//true</span></span><br><span class="line">&gt;   &gt;   &gt; <span class="built_in">console</span>.log(<span class="number">10</span>&gt;<span class="number">9</span> &amp;&amp; <span class="number">20</span>&lt;=<span class="number">20</span>); <span class="comment">//true</span></span><br><span class="line">&gt;   &gt;   &gt; <span class="built_in">console</span>.log(<span class="string">'张三'</span>==<span class="string">'李四'</span> &amp;&amp; <span class="number">1</span>==<span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li><p>或  ||</p><blockquote><p>表示或者，组合两个条件</p><ul><li><p>语法格式：条件1 || 条件2</p><blockquote><p>如果 ||两边的条件结果都是false，结果就是false。其他情况都是true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   &gt; <span class="built_in">console</span>.log(<span class="number">1</span>==<span class="number">2</span> || <span class="number">3</span>==<span class="number">3</span>); <span class="comment">//true</span></span><br><span class="line">&gt;   &gt;   &gt; <span class="built_in">console</span>.log(<span class="string">'张三'</span>==<span class="string">'李四'</span> || <span class="number">18</span>&lt;<span class="number">17</span>); <span class="comment">//false</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li><p>非  !</p><blockquote><p>表示取反。</p><ul><li><p>语法格式： !条件</p><p>对true取反就是false，对false取反就是true</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   &gt; !(<span class="number">1</span>==<span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line">&gt;   &gt;   &gt; !(<span class="string">'张三'</span>==<span class="string">'李四'</span>); <span class="comment">//true;</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote></li></ul></blockquote><h3 id="9-5-一元运算符-【重要】"><a href="#9-5-一元运算符-【重要】" class="headerlink" title="9.5  一元运算符 【重要】"></a>9.5  一元运算符 【重要】</h3><blockquote><ul><li><p>什么是一元运算符？</p><blockquote><p>操作数只有一个的运算符就是一元运算符</p></blockquote></li><li><p>一元运算符</p><blockquote><ul><li><p>非 !</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   !<span class="literal">true</span>;</span><br><span class="line">&gt;   &gt;   !<span class="literal">false</span>;</span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul></blockquote><blockquote><blockquote><ul><li><p>自增  ++</p><blockquote><ul><li><p>针对的是变量，在变量原有的基础之上自增1,可以分为前自增和后自增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   ++num;    <span class="comment">//前自增</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(num);  <span class="comment">//11</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   num2++;   <span class="comment">//后自增</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(num2); <span class="comment">//11</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul></blockquote></blockquote><blockquote><blockquote><blockquote><ul><li><p>前自增与后子增的区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   &gt;   <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;   &gt;   &gt;   前自增在参与其他运算时，先自增得出结果，再参与运算。</span></span><br><span class="line"><span class="comment">&gt;   &gt;   &gt;   后子增在参与其他运算时，先参与运算，再自增得出结果。</span></span><br><span class="line"><span class="comment">&gt;   &gt;   &gt;   */</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="comment">//前自增</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> result = ++num + <span class="number">2</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(result); <span class="comment">//13;</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="comment">//后子增</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> result2 = num++ + <span class="number">2</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(result2); <span class="comment">//12;</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>​</p></blockquote><ul><li><p>自减  –</p><blockquote><ul><li><p>针对的是变量，在变量原有的基础之上自减1,可以分为前自减和后自减</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   --num;    <span class="comment">//前自减</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(num);  <span class="comment">//9</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   num2--;   <span class="comment">//后自减</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(num2); <span class="comment">//9</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul></blockquote></blockquote><blockquote><blockquote><blockquote><ul><li><p>前自减与后子减的区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   &gt;   <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;   &gt;   &gt;   前自减在参与其他运算时，先自减1得出结果，再参与运算。</span></span><br><span class="line"><span class="comment">&gt;   &gt;   &gt;   后子减在参与其他运算时，先参与运算，再自减1得出结果。</span></span><br><span class="line"><span class="comment">&gt;   &gt;   &gt;   */</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="comment">//前自减</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> result = --num + <span class="number">2</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(result); <span class="comment">//11;</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="comment">//后子减</span></span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="keyword">var</span> result2 = num-- + <span class="number">2</span>;</span><br><span class="line">&gt;   &gt;   &gt;   <span class="built_in">console</span>.log(result2); <span class="comment">//12;</span></span><br><span class="line">&gt;   &gt;   &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>​</p></blockquote><ul><li><p>负号 -</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;   cosole.log(<span class="number">-1</span>);</span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote><h3 id="9-6-运算符的优先级-【重要】"><a href="#9-6-运算符的优先级-【重要】" class="headerlink" title="9.6  运算符的优先级 【重要】"></a>9.6  运算符的优先级 【重要】</h3><blockquote><ul><li><p>优先级从高到底</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   1. ()  优先级最高</span><br><span class="line">&gt;   2.   一元运算符  ++   --   !   +（正） -（负）</span><br><span class="line">&gt;   3. 算术运算符  先*  /  %   后 +   -</span><br><span class="line">&gt;   4. 关系运算符  &gt;   &gt;=   &lt;   &lt;=</span><br><span class="line">&gt;   5. 相等运算符   == 、  != 、  === 、!=</span><br><span class="line">&gt;   6. 逻辑运算符 先&amp;&amp;   后||</span><br><span class="line">&gt;   7. 赋值运算符</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote></blockquote><h2 id="十-数据类型转换"><a href="#十-数据类型转换" class="headerlink" title="十.  数据类型转换"></a>十.  数据类型转换</h2><h3 id="10-1-数据类型转换介绍-【了解】"><a href="#10-1-数据类型转换介绍-【了解】" class="headerlink" title="10.1 数据类型转换介绍 【了解】"></a>10.1 数据类型转换介绍 【了解】</h3><blockquote><p>​    在程序中，任何类型的数据之间都可以参与运算符的。比如数字可以和字符串参与运算，字符串可以和布尔值参与参数等等。</p><p>​    总而言之，任何不同类型的数据之间可以参与任何不同的运算。</p><p>如：案例，接收用户说输入的年龄，在用户年龄原有的基础之上加5.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> age = prompt(<span class="string">'请输入你的年龄'</span>); <span class="comment">//加入用户输入的是10</span></span><br><span class="line">&gt; age = age + <span class="number">5</span>; </span><br><span class="line">&gt; <span class="built_in">console</span>.log(age);  <span class="comment">//结果是 105，为什么？如何解决？</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="10-2-强制转换-【重要】"><a href="#10-2-强制转换-【重要】" class="headerlink" title="10.2  强制转换 【重要】"></a>10.2  强制转换 【重要】</h3><ul><li><p>什么是强制转换？</p><blockquote><p>就是手动的通过转换工具将一个数据转换成另一种类型的数据。</p></blockquote></li></ul><ul><li><p>其他类型数据转数字 Number</p><ul><li><p>Number(其他数据);</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//数值字符串转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result1 = <span class="built_in">Number</span>(<span class="string">'123'</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result1);<span class="comment">//123</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(result1)); <span class="comment">//number</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//非数值字符串转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result2 = <span class="built_in">Number</span>(<span class="string">'abc'</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result2); <span class="comment">//NaN,'abc'整体不是数值，转换不了正常的数字。</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(result2)); <span class="comment">//number</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//非数值字符串转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result3 = <span class="built_in">Number</span>(<span class="string">'12abc'</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result2); <span class="comment">//NaN,'12abc'不是数值，转换不了正常的数字</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(result2)); <span class="comment">//number</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//布尔值转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result4 = <span class="built_in">Number</span>(<span class="literal">true</span>);  </span><br><span class="line">&gt; <span class="keyword">var</span> result5 = <span class="built_in">Number</span>(<span class="literal">false</span>); </span><br><span class="line">&gt; <span class="built_in">console</span>.log(result4)  <span class="comment">//1</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(result5)  <span class="comment">//0</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//undefined 转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result6 = <span class="built_in">Number</span>(<span class="literal">undefined</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result6); <span class="comment">//NaN</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//null 转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result7 = <span class="built_in">Number</span>(<span class="literal">null</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result7); <span class="comment">//0</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>parseInt(其他数据);</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//与Number工具不同是，parseInt能将正常的字符串数值转换为整数</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//数值字符串转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result1 = <span class="built_in">parseInt</span>(<span class="string">'123.34'</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result1);<span class="comment">//123</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(result1)); <span class="comment">//number</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//非数值字符串转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result2 = <span class="built_in">parseInt</span>(<span class="string">'abc'</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result2); <span class="comment">//NaN,'abc'整体不是数值，转换不了正常的数字。</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(result2)); <span class="comment">//number</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//非数值字符串转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result3 = <span class="built_in">parseInt</span>(<span class="string">'12abc'</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result2); <span class="comment">//12,会把最前面的数字提取出来</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(result2)); <span class="comment">//number</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//布尔值转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result4 = <span class="built_in">parseInt</span>(<span class="literal">true</span>);  </span><br><span class="line">&gt; <span class="keyword">var</span> result5 = <span class="built_in">parseInt</span>(<span class="literal">false</span>); </span><br><span class="line">&gt; <span class="built_in">console</span>.log(result4)  <span class="comment">//NaN</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(result5)  <span class="comment">//NaN</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//undefined 转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result6 = <span class="built_in">parseInt</span>(<span class="literal">undefined</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result6); <span class="comment">//NaN</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//null 转数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> result7 = <span class="built_in">parseInt</span>(<span class="literal">null</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result7); <span class="comment">//NaN</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>parseFloat(其他数据);</p><blockquote><p>​    与parseInt不同的是，可以将正常的小数字符串数值转换成数字类型的小数，其他情况都和parseInt相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> result1 = <span class="built_in">parseFloat</span>(<span class="string">'3.14'</span>);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result1); <span class="comment">//3.14</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(result1)); <span class="comment">//number</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>其他类型数据转字符串 String</p><ul><li><p>所有的数据在转换成字符串时，其实就是在其他数据两边加上双引号或单引号。</p></li><li><p>变量名.toString();</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//数字转字符串</span></span><br><span class="line">&gt; <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> result1 = num.toString();</span><br><span class="line">&gt; <span class="built_in">console</span>.log(result1); <span class="comment">//"123";</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//布尔值转字符串</span></span><br><span class="line">&gt; <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> flag2 = <span class="literal">false</span>;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(flag.toString()); <span class="comment">//"true"</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(flag2.toString());<span class="comment">//"false"</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//在使用变量.toString()方法时，变量的值不能为undefined和null，否则会报错</span></span><br><span class="line">&gt; <span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">&gt; a.toString(); <span class="comment">//报错</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//其他 略</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>String(其他数据);</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> result1 = <span class="built_in">String</span>(<span class="number">123</span>); <span class="comment">//'123';</span></span><br><span class="line">&gt; <span class="keyword">var</span> result2 = <span class="built_in">String</span>(<span class="literal">true</span>); <span class="comment">//'true';</span></span><br><span class="line">&gt; <span class="keyword">var</span> result3 = <span class="built_in">String</span>(<span class="literal">NaN</span>); <span class="comment">//'NaN';</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment">//其他情况 略</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>其他数据类型转布尔 Boolean</p><ul><li><p>Boolean(其他数据)</p><blockquote><p>注意：null、undefined、0、NaN、’’ 转换为boolean结果为false,其他的数据转换的结果为true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Boolean</span>(<span class="literal">null</span>); <span class="comment">//false</span></span><br><span class="line">&gt; <span class="built_in">Boolean</span>(<span class="string">''</span>); <span class="comment">//false</span></span><br><span class="line">&gt; <span class="comment">//其他略</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="built_in">Boolean</span>(<span class="string">'我'</span>); <span class="comment">//true</span></span><br><span class="line">&gt; <span class="built_in">Boolean</span>(<span class="number">123</span>); <span class="comment">//true</span></span><br><span class="line">&gt; <span class="comment">//其他略</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ul><h3 id="10-3-隐式转换-【重要】"><a href="#10-3-隐式转换-【重要】" class="headerlink" title="10.3  隐式转换 【重要】"></a>10.3  隐式转换 【重要】</h3><ul><li><p>什么叫做隐式转换？</p><blockquote><p>​    隐式转换，也被称为自动转换。就是在程序运行过程中，不需要我们手动转换，数据会根据运算情况自动的转换为其他类型的数据。</p></blockquote></li></ul><ul><li><p>其他数据转数字 Number</p><blockquote><pre><code>在做算术运算时（除了和字符串做相加运算外），其他非数字类型的数据会自动的转换为Number类型的数据。就相当于悄悄的，看不见的用Number(其他数据)转换为数字。</code></pre><p> ​    任何数据和NaN做运算（除了和字符串做相加运算外），结果始终都是NaN。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">var</span> result1 = <span class="string">'2'</span> - <span class="number">1</span>; <span class="comment">//字符串 '2' 自动转换为数字 2</span></span><br><span class="line">&gt;  <span class="built_in">console</span>.log(result1); <span class="comment">// 1;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;  <span class="keyword">var</span> result2 = <span class="string">'3a'</span> - <span class="number">1</span>;  <span class="comment">//字符串 '3a' 自动转换为数字 NaN</span></span><br><span class="line">&gt;  <span class="built_in">console</span>.log(result2); <span class="comment">// NaN</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>其他数据转字符串 String</p><blockquote><p>​    任何数据和字符串做相加运算时，其他非字符串数据会自动的转换为String类型的数据。就相当于悄悄的，看不见的用String(其他数据)转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> result1 = <span class="literal">true</span> + <span class="string">'我'</span>; <span class="comment">// 布尔值 true 自动转换为字符串 'true'</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(result1); <span class="comment">// 'true我'</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>其他数据转布尔 Boolean</p><blockquote><pre><code>在取反、选择语句 和 循环语句中的条件表达式中，其他数据会自动的转换为布尔值。就相当于悄悄的，看不见的用Boolean(其他数据)转换为布尔值。</code></pre><p> ​</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="built_in">console</span>.log(!<span class="number">1</span>);  <span class="comment">//false ; 数字1 转换为boolean值为 true,对true取反就是false</span></span><br><span class="line">&gt;  consoel.log(!(<span class="number">1</span>&gt;=<span class="number">2</span>)); <span class="comment">//true</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript语法基础-01&quot;&gt;&lt;a href=&quot;#JavaScript语法基础-01&quot; class=&quot;headerlink&quot; title=&quot;JavaScript语法基础 01&quot;&gt;&lt;/a&gt;JavaScript语法基础 01&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Todos-vuejs</title>
    <link href="http://yoursite.com/2018/04/02/Todos-vuejs/"/>
    <id>http://yoursite.com/2018/04/02/Todos-vuejs/</id>
    <published>2018-04-02T11:25:04.000Z</published>
    <updated>2018-04-02T12:53:24.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果地址："><a href="#效果地址：" class="headerlink" title="效果地址："></a>效果地址：</h2><p><a href="https://coffeehouse1122.github.io/Todos-vuejs/" target="_blank" rel="noopener">https://coffeehouse1122.github.io/Todos-vuejs/</a></p><h2 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h2><p><a href="https://github.com/CoffeeHouse1122/Todos-vuejs" target="_blank" rel="noopener">https://github.com/CoffeeHouse1122/Todos-vuejs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;效果地址：&quot;&gt;&lt;a href=&quot;#效果地址：&quot; class=&quot;headerlink&quot; title=&quot;效果地址：&quot;&gt;&lt;/a&gt;效果地址：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://coffeehouse1122.github.io/Todos-vuejs/&quot; t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2.16纪念</title>
    <link href="http://yoursite.com/2018/03/31/2-16%E7%BA%AA%E5%BF%B5/"/>
    <id>http://yoursite.com/2018/03/31/2-16纪念/</id>
    <published>2018-03-31T06:12:58.000Z</published>
    <updated>2018-03-31T06:56:07.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果网址-："><a href="#效果网址-：" class="headerlink" title="效果网址 ："></a>效果网址 ：</h2><p><a href="https://coffeehouse1122.github.io/216LoveDay.github.io/" target="_blank" rel="noopener">https://coffeehouse1122.github.io/216LoveDay.github.io/</a></p><h2 id="源码地址-："><a href="#源码地址-：" class="headerlink" title="源码地址 ："></a>源码地址 ：</h2><p><a href="https://github.com/CoffeeHouse1122/216LoveDay.github.io" target="_blank" rel="noopener">https://github.com/CoffeeHouse1122/216LoveDay.github.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;效果网址-：&quot;&gt;&lt;a href=&quot;#效果网址-：&quot; class=&quot;headerlink&quot; title=&quot;效果网址 ：&quot;&gt;&lt;/a&gt;效果网址 ：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://coffeehouse1122.github.io/216LoveDay.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>3.29</title>
    <link href="http://yoursite.com/2018/03/29/3-29/"/>
    <id>http://yoursite.com/2018/03/29/3-29/</id>
    <published>2018-03-29T09:01:04.000Z</published>
    <updated>2018-03-29T09:02:03.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="酷夏将至。。。"><a href="#酷夏将至。。。" class="headerlink" title="酷夏将至。。。"></a>酷夏将至。。。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;酷夏将至。。。&quot;&gt;&lt;a href=&quot;#酷夏将至。。。&quot; class=&quot;headerlink&quot; title=&quot;酷夏将至。。。&quot;&gt;&lt;/a&gt;酷夏将至。。。&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/29/hello-world/"/>
    <id>http://yoursite.com/2018/03/29/hello-world/</id>
    <published>2018-03-29T08:01:04.000Z</published>
    <updated>2018-10-08T07:15:15.399Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
